// Code generated by go-swagger; DO NOT EDIT.

package notifications

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new notifications API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for notifications API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	GetNotificationToolStatus(params *GetNotificationToolStatusParams, opts ...ClientOption) (*GetNotificationToolStatusOK, error)

	InsertNotificationToolToken(params *InsertNotificationToolTokenParams, opts ...ClientOption) (*InsertNotificationToolTokenOK, error)

	RegisterNotificationTool(params *RegisterNotificationToolParams, opts ...ClientOption) error

	UninstallNotificationToolStatus(params *UninstallNotificationToolStatusParams, opts ...ClientOption) (*UninstallNotificationToolStatusOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  GetNotificationToolStatus gets the status of a notification tool
*/
func (a *Client) GetNotificationToolStatus(params *GetNotificationToolStatusParams, opts ...ClientOption) (*GetNotificationToolStatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNotificationToolStatusParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetNotificationToolStatus",
		Method:             "GET",
		PathPattern:        "/v1/notifications/{type}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNotificationToolStatusReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNotificationToolStatusOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetNotificationToolStatus: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  InsertNotificationToolToken inserts an access token for the notification tool
*/
func (a *Client) InsertNotificationToolToken(params *InsertNotificationToolTokenParams, opts ...ClientOption) (*InsertNotificationToolTokenOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewInsertNotificationToolTokenParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "InsertNotificationToolToken",
		Method:             "PUT",
		PathPattern:        "/v1/notifications/{type}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &InsertNotificationToolTokenReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*InsertNotificationToolTokenOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for InsertNotificationToolToken: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  RegisterNotificationTool handles callbacks from notification applications
*/
func (a *Client) RegisterNotificationTool(params *RegisterNotificationToolParams, opts ...ClientOption) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRegisterNotificationToolParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "RegisterNotificationTool",
		Method:             "GET",
		PathPattern:        "/v1/notifications-install/callback/{type}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RegisterNotificationToolReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	_, err := a.transport.Submit(op)
	if err != nil {
		return err
	}
	return nil
}

/*
  UninstallNotificationToolStatus uninstalls a notification tool
*/
func (a *Client) UninstallNotificationToolStatus(params *UninstallNotificationToolStatusParams, opts ...ClientOption) (*UninstallNotificationToolStatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUninstallNotificationToolStatusParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UninstallNotificationToolStatus",
		Method:             "DELETE",
		PathPattern:        "/v1/notifications/{type}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UninstallNotificationToolStatusReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UninstallNotificationToolStatusOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UninstallNotificationToolStatus: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}

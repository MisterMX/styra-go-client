// Code generated by go-swagger; DO NOT EDIT.

package stacks

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/mistermx/styra-go-client/pkg/models"
)

// ValidateStackComplianceReader is a Reader for the ValidateStackCompliance structure.
type ValidateStackComplianceReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ValidateStackComplianceReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewValidateStackComplianceOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 202:
		result := NewValidateStackComplianceAccepted()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewValidateStackComplianceNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewValidateStackComplianceOK creates a ValidateStackComplianceOK with default headers values
func NewValidateStackComplianceOK() *ValidateStackComplianceOK {
	return &ValidateStackComplianceOK{}
}

/* ValidateStackComplianceOK describes a response with status code 200, with default header values.

OK
*/
type ValidateStackComplianceOK struct {
	Payload *models.V1StacksComplianceResponse
}

func (o *ValidateStackComplianceOK) Error() string {
	return fmt.Sprintf("[POST /v1/stacks/{stack}/validate/compliance][%d] validateStackComplianceOK  %+v", 200, o.Payload)
}
func (o *ValidateStackComplianceOK) GetPayload() *models.V1StacksComplianceResponse {
	return o.Payload
}

func (o *ValidateStackComplianceOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.V1StacksComplianceResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewValidateStackComplianceAccepted creates a ValidateStackComplianceAccepted with default headers values
func NewValidateStackComplianceAccepted() *ValidateStackComplianceAccepted {
	return &ValidateStackComplianceAccepted{}
}

/* ValidateStackComplianceAccepted describes a response with status code 202, with default header values.

Accepted
*/
type ValidateStackComplianceAccepted struct {
}

func (o *ValidateStackComplianceAccepted) Error() string {
	return fmt.Sprintf("[POST /v1/stacks/{stack}/validate/compliance][%d] validateStackComplianceAccepted ", 202)
}

func (o *ValidateStackComplianceAccepted) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewValidateStackComplianceNotFound creates a ValidateStackComplianceNotFound with default headers values
func NewValidateStackComplianceNotFound() *ValidateStackComplianceNotFound {
	return &ValidateStackComplianceNotFound{}
}

/* ValidateStackComplianceNotFound describes a response with status code 404, with default header values.

Not Found
*/
type ValidateStackComplianceNotFound struct {
	Payload *models.V1ErrorResponse
}

func (o *ValidateStackComplianceNotFound) Error() string {
	return fmt.Sprintf("[POST /v1/stacks/{stack}/validate/compliance][%d] validateStackComplianceNotFound  %+v", 404, o.Payload)
}
func (o *ValidateStackComplianceNotFound) GetPayload() *models.V1ErrorResponse {
	return o.Payload
}

func (o *ValidateStackComplianceNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.V1ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

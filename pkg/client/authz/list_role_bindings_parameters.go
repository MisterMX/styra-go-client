// Code generated by go-swagger; DO NOT EDIT.

package authz

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewListRoleBindingsParams creates a new ListRoleBindingsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewListRoleBindingsParams() *ListRoleBindingsParams {
	return &ListRoleBindingsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewListRoleBindingsParamsWithTimeout creates a new ListRoleBindingsParams object
// with the ability to set a timeout on a request.
func NewListRoleBindingsParamsWithTimeout(timeout time.Duration) *ListRoleBindingsParams {
	return &ListRoleBindingsParams{
		timeout: timeout,
	}
}

// NewListRoleBindingsParamsWithContext creates a new ListRoleBindingsParams object
// with the ability to set a context for a request.
func NewListRoleBindingsParamsWithContext(ctx context.Context) *ListRoleBindingsParams {
	return &ListRoleBindingsParams{
		Context: ctx,
	}
}

// NewListRoleBindingsParamsWithHTTPClient creates a new ListRoleBindingsParams object
// with the ability to set a custom HTTPClient for a request.
func NewListRoleBindingsParamsWithHTTPClient(client *http.Client) *ListRoleBindingsParams {
	return &ListRoleBindingsParams{
		HTTPClient: client,
	}
}

/* ListRoleBindingsParams contains all the parameters to send to the API endpoint
   for the list role bindings operation.

   Typically these are written to a http.Request.
*/
type ListRoleBindingsParams struct {

	/* Internal.

	   if set to 'true', returns only internal rolebindings
	*/
	Internal *bool

	/* ResourceID.

	   if set returns only rolebindings involving the specified resource id
	*/
	ResourceID *string

	/* ResourceKind.

	   if set returns only rolebindings involving the specified resource kind
	*/
	ResourceKind *string

	/* RoleID.

	   if set returns only rolebindings involving the specified role id
	*/
	RoleID *string

	/* SubjectID.

	   if set returns only rolebindings involving the specified subject id
	*/
	SubjectID *string

	/* SubjectKind.

	   if set returns only rolebindings involving the specified subject kind
	*/
	SubjectKind *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the list role bindings params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ListRoleBindingsParams) WithDefaults() *ListRoleBindingsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the list role bindings params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ListRoleBindingsParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the list role bindings params
func (o *ListRoleBindingsParams) WithTimeout(timeout time.Duration) *ListRoleBindingsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the list role bindings params
func (o *ListRoleBindingsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the list role bindings params
func (o *ListRoleBindingsParams) WithContext(ctx context.Context) *ListRoleBindingsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the list role bindings params
func (o *ListRoleBindingsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the list role bindings params
func (o *ListRoleBindingsParams) WithHTTPClient(client *http.Client) *ListRoleBindingsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the list role bindings params
func (o *ListRoleBindingsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithInternal adds the internal to the list role bindings params
func (o *ListRoleBindingsParams) WithInternal(internal *bool) *ListRoleBindingsParams {
	o.SetInternal(internal)
	return o
}

// SetInternal adds the internal to the list role bindings params
func (o *ListRoleBindingsParams) SetInternal(internal *bool) {
	o.Internal = internal
}

// WithResourceID adds the resourceID to the list role bindings params
func (o *ListRoleBindingsParams) WithResourceID(resourceID *string) *ListRoleBindingsParams {
	o.SetResourceID(resourceID)
	return o
}

// SetResourceID adds the resourceId to the list role bindings params
func (o *ListRoleBindingsParams) SetResourceID(resourceID *string) {
	o.ResourceID = resourceID
}

// WithResourceKind adds the resourceKind to the list role bindings params
func (o *ListRoleBindingsParams) WithResourceKind(resourceKind *string) *ListRoleBindingsParams {
	o.SetResourceKind(resourceKind)
	return o
}

// SetResourceKind adds the resourceKind to the list role bindings params
func (o *ListRoleBindingsParams) SetResourceKind(resourceKind *string) {
	o.ResourceKind = resourceKind
}

// WithRoleID adds the roleID to the list role bindings params
func (o *ListRoleBindingsParams) WithRoleID(roleID *string) *ListRoleBindingsParams {
	o.SetRoleID(roleID)
	return o
}

// SetRoleID adds the roleId to the list role bindings params
func (o *ListRoleBindingsParams) SetRoleID(roleID *string) {
	o.RoleID = roleID
}

// WithSubjectID adds the subjectID to the list role bindings params
func (o *ListRoleBindingsParams) WithSubjectID(subjectID *string) *ListRoleBindingsParams {
	o.SetSubjectID(subjectID)
	return o
}

// SetSubjectID adds the subjectId to the list role bindings params
func (o *ListRoleBindingsParams) SetSubjectID(subjectID *string) {
	o.SubjectID = subjectID
}

// WithSubjectKind adds the subjectKind to the list role bindings params
func (o *ListRoleBindingsParams) WithSubjectKind(subjectKind *string) *ListRoleBindingsParams {
	o.SetSubjectKind(subjectKind)
	return o
}

// SetSubjectKind adds the subjectKind to the list role bindings params
func (o *ListRoleBindingsParams) SetSubjectKind(subjectKind *string) {
	o.SubjectKind = subjectKind
}

// WriteToRequest writes these params to a swagger request
func (o *ListRoleBindingsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Internal != nil {

		// query param internal
		var qrInternal bool

		if o.Internal != nil {
			qrInternal = *o.Internal
		}
		qInternal := swag.FormatBool(qrInternal)
		if qInternal != "" {

			if err := r.SetQueryParam("internal", qInternal); err != nil {
				return err
			}
		}
	}

	if o.ResourceID != nil {

		// query param resource_id
		var qrResourceID string

		if o.ResourceID != nil {
			qrResourceID = *o.ResourceID
		}
		qResourceID := qrResourceID
		if qResourceID != "" {

			if err := r.SetQueryParam("resource_id", qResourceID); err != nil {
				return err
			}
		}
	}

	if o.ResourceKind != nil {

		// query param resource_kind
		var qrResourceKind string

		if o.ResourceKind != nil {
			qrResourceKind = *o.ResourceKind
		}
		qResourceKind := qrResourceKind
		if qResourceKind != "" {

			if err := r.SetQueryParam("resource_kind", qResourceKind); err != nil {
				return err
			}
		}
	}

	if o.RoleID != nil {

		// query param role_id
		var qrRoleID string

		if o.RoleID != nil {
			qrRoleID = *o.RoleID
		}
		qRoleID := qrRoleID
		if qRoleID != "" {

			if err := r.SetQueryParam("role_id", qRoleID); err != nil {
				return err
			}
		}
	}

	if o.SubjectID != nil {

		// query param subject_id
		var qrSubjectID string

		if o.SubjectID != nil {
			qrSubjectID = *o.SubjectID
		}
		qSubjectID := qrSubjectID
		if qSubjectID != "" {

			if err := r.SetQueryParam("subject_id", qSubjectID); err != nil {
				return err
			}
		}
	}

	if o.SubjectKind != nil {

		// query param subject_kind
		var qrSubjectKind string

		if o.SubjectKind != nil {
			qrSubjectKind = *o.SubjectKind
		}
		qSubjectKind := qrSubjectKind
		if qSubjectKind != "" {

			if err := r.SetQueryParam("subject_kind", qSubjectKind); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

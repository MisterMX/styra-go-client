// Code generated by go-swagger; DO NOT EDIT.

package authz

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new authz API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for authz API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CheckPermissions(params *CheckPermissionsParams, opts ...ClientOption) (*CheckPermissionsOK, error)

	CreateRoleBinding(params *CreateRoleBindingParams, opts ...ClientOption) (*CreateRoleBindingOK, error)

	DeleteRoleBinding(params *DeleteRoleBindingParams, opts ...ClientOption) (*DeleteRoleBindingOK, error)

	DeleteRoleBindingSubjects(params *DeleteRoleBindingSubjectsParams, opts ...ClientOption) (*DeleteRoleBindingSubjectsOK, error)

	GetRoleBinding(params *GetRoleBindingParams, opts ...ClientOption) (*GetRoleBindingOK, error)

	ListAllRoleBindings(params *ListAllRoleBindingsParams, opts ...ClientOption) (*ListAllRoleBindingsOK, error)

	ListRoleBindings(params *ListRoleBindingsParams, opts ...ClientOption) (*ListRoleBindingsOK, error)

	ListRoles(params *ListRolesParams, opts ...ClientOption) (*ListRolesOK, error)

	MergeRoleBindingSubjects(params *MergeRoleBindingSubjectsParams, opts ...ClientOption) (*MergeRoleBindingSubjectsOK, error)

	ResetRoleBindings(params *ResetRoleBindingsParams, opts ...ClientOption) (*ResetRoleBindingsOK, error)

	UpdateMigrationStatus(params *UpdateMigrationStatusParams, opts ...ClientOption) (*UpdateMigrationStatusOK, error)

	UpdateRoleBinding(params *UpdateRoleBindingParams, opts ...ClientOption) (*UpdateRoleBindingOK, error)

	UpdateRoleBindingSubjects(params *UpdateRoleBindingSubjectsParams, opts ...ClientOption) (*UpdateRoleBindingSubjectsOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CheckPermissions evaluates a list of permissions
*/
func (a *Client) CheckPermissions(params *CheckPermissionsParams, opts ...ClientOption) (*CheckPermissionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCheckPermissionsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CheckPermissions",
		Method:             "POST",
		PathPattern:        "/v1/authz/evaluation",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CheckPermissionsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CheckPermissionsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CheckPermissions: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateRoleBinding creates or update rolebinding
*/
func (a *Client) CreateRoleBinding(params *CreateRoleBindingParams, opts ...ClientOption) (*CreateRoleBindingOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateRoleBindingParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateRoleBinding",
		Method:             "POST",
		PathPattern:        "/v2/authz/rolebindings",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateRoleBindingReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateRoleBindingOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreateRoleBinding: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteRoleBinding deletes rolebinding
*/
func (a *Client) DeleteRoleBinding(params *DeleteRoleBindingParams, opts ...ClientOption) (*DeleteRoleBindingOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteRoleBindingParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteRoleBinding",
		Method:             "DELETE",
		PathPattern:        "/v2/authz/rolebindings/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteRoleBindingReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteRoleBindingOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteRoleBinding: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteRoleBindingSubjects deletes rolebinding subjects
*/
func (a *Client) DeleteRoleBindingSubjects(params *DeleteRoleBindingSubjectsParams, opts ...ClientOption) (*DeleteRoleBindingSubjectsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteRoleBindingSubjectsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteRoleBindingSubjects",
		Method:             "DELETE",
		PathPattern:        "/v2/authz/rolebindings/{id}/subjects",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteRoleBindingSubjectsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteRoleBindingSubjectsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteRoleBindingSubjects: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetRoleBinding gets rolebinding
*/
func (a *Client) GetRoleBinding(params *GetRoleBindingParams, opts ...ClientOption) (*GetRoleBindingOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRoleBindingParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetRoleBinding",
		Method:             "GET",
		PathPattern:        "/v2/authz/rolebindings/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetRoleBindingReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRoleBindingOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetRoleBinding: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListAllRoleBindings lists all role bindings for all resources of all resource types
*/
func (a *Client) ListAllRoleBindings(params *ListAllRoleBindingsParams, opts ...ClientOption) (*ListAllRoleBindingsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListAllRoleBindingsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ListAllRoleBindings",
		Method:             "GET",
		PathPattern:        "/v1/authz/rolebindings",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListAllRoleBindingsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListAllRoleBindingsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ListAllRoleBindings: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListRoleBindings lists role bindings
*/
func (a *Client) ListRoleBindings(params *ListRoleBindingsParams, opts ...ClientOption) (*ListRoleBindingsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListRoleBindingsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ListRoleBindings",
		Method:             "GET",
		PathPattern:        "/v2/authz/rolebindings",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListRoleBindingsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListRoleBindingsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ListRoleBindings: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListRoles lists roles
*/
func (a *Client) ListRoles(params *ListRolesParams, opts ...ClientOption) (*ListRolesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListRolesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ListRoles",
		Method:             "GET",
		PathPattern:        "/v2/authz/roles",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListRolesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListRolesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ListRoles: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  MergeRoleBindingSubjects merges rolebinding subjects
*/
func (a *Client) MergeRoleBindingSubjects(params *MergeRoleBindingSubjectsParams, opts ...ClientOption) (*MergeRoleBindingSubjectsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMergeRoleBindingSubjectsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "MergeRoleBindingSubjects",
		Method:             "PUT",
		PathPattern:        "/v2/authz/rolebindings/{id}/subjects",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &MergeRoleBindingSubjectsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*MergeRoleBindingSubjectsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for MergeRoleBindingSubjects: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ResetRoleBindings resets rolebindings
*/
func (a *Client) ResetRoleBindings(params *ResetRoleBindingsParams, opts ...ClientOption) (*ResetRoleBindingsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewResetRoleBindingsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ResetRoleBindings",
		Method:             "PUT",
		PathPattern:        "/v2/authz/reset/rolebindings",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ResetRoleBindingsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ResetRoleBindingsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ResetRoleBindings: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateMigrationStatus updates migration status
*/
func (a *Client) UpdateMigrationStatus(params *UpdateMigrationStatusParams, opts ...ClientOption) (*UpdateMigrationStatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateMigrationStatusParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateMigrationStatus",
		Method:             "PUT",
		PathPattern:        "/v2/authz/migration/status",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateMigrationStatusReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateMigrationStatusOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UpdateMigrationStatus: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateRoleBinding updates a role binding
*/
func (a *Client) UpdateRoleBinding(params *UpdateRoleBindingParams, opts ...ClientOption) (*UpdateRoleBindingOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateRoleBindingParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateRoleBinding",
		Method:             "PUT",
		PathPattern:        "/v1/authz/rolebindings/{resourcetype}/{resource}/{rolebinding}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateRoleBindingReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateRoleBindingOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UpdateRoleBinding: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateRoleBindingSubjects updates rolebinding subjects
*/
func (a *Client) UpdateRoleBindingSubjects(params *UpdateRoleBindingSubjectsParams, opts ...ClientOption) (*UpdateRoleBindingSubjectsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateRoleBindingSubjectsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateRoleBindingSubjects",
		Method:             "POST",
		PathPattern:        "/v2/authz/rolebindings/{id}/subjects",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateRoleBindingSubjectsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateRoleBindingSubjectsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UpdateRoleBindingSubjects: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}

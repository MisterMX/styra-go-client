// Code generated by go-swagger; DO NOT EDIT.

package timeseries

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new timeseries API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for timeseries API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	HandleAdvice(params *HandleAdviceParams, opts ...ClientOption) (*HandleAdviceOK, error)

	HandleDecision(params *HandleDecisionParams, opts ...ClientOption) (*HandleDecisionOK, error)

	HandleDeny(params *HandleDenyParams, opts ...ClientOption) (*HandleDenyOK, error)

	HandleError(params *HandleErrorParams, opts ...ClientOption) (*HandleErrorOK, error)

	HandleLatency(params *HandleLatencyParams, opts ...ClientOption) (*HandleLatencyOK, error)

	HandleTimeseriesMetrics(params *HandleTimeseriesMetricsParams, opts ...ClientOption) (*HandleTimeseriesMetricsOK, error)

	HandleUnknown(params *HandleUnknownParams, opts ...ClientOption) (*HandleUnknownOK, error)

	HandleUsage(params *HandleUsageParams, opts ...ClientOption) (*HandleUsageOK, error)

	HandleViolation(params *HandleViolationParams, opts ...ClientOption) (*HandleViolationOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  HandleAdvice handles advice
*/
func (a *Client) HandleAdvice(params *HandleAdviceParams, opts ...ClientOption) (*HandleAdviceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewHandleAdviceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "HandleAdvice",
		Method:             "POST",
		PathPattern:        "/v1/timeseries/advice",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &HandleAdviceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*HandleAdviceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for HandleAdvice: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  HandleDecision handles decision
*/
func (a *Client) HandleDecision(params *HandleDecisionParams, opts ...ClientOption) (*HandleDecisionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewHandleDecisionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "HandleDecision",
		Method:             "POST",
		PathPattern:        "/v1/timeseries/decision",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &HandleDecisionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*HandleDecisionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for HandleDecision: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  HandleDeny handles deny
*/
func (a *Client) HandleDeny(params *HandleDenyParams, opts ...ClientOption) (*HandleDenyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewHandleDenyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "HandleDeny",
		Method:             "POST",
		PathPattern:        "/v1/timeseries/deny",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &HandleDenyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*HandleDenyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for HandleDeny: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  HandleError handles error
*/
func (a *Client) HandleError(params *HandleErrorParams, opts ...ClientOption) (*HandleErrorOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewHandleErrorParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "HandleError",
		Method:             "POST",
		PathPattern:        "/v1/timeseries/error",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &HandleErrorReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*HandleErrorOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for HandleError: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  HandleLatency handles latency
*/
func (a *Client) HandleLatency(params *HandleLatencyParams, opts ...ClientOption) (*HandleLatencyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewHandleLatencyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "HandleLatency",
		Method:             "POST",
		PathPattern:        "/v1/timeseries/latency",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &HandleLatencyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*HandleLatencyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for HandleLatency: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  HandleTimeseriesMetrics handles timeseries metrics
*/
func (a *Client) HandleTimeseriesMetrics(params *HandleTimeseriesMetricsParams, opts ...ClientOption) (*HandleTimeseriesMetricsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewHandleTimeseriesMetricsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "HandleTimeseriesMetrics",
		Method:             "GET",
		PathPattern:        "/v1/timeseries/metrics",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &HandleTimeseriesMetricsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*HandleTimeseriesMetricsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for HandleTimeseriesMetrics: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  HandleUnknown handles unknown
*/
func (a *Client) HandleUnknown(params *HandleUnknownParams, opts ...ClientOption) (*HandleUnknownOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewHandleUnknownParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "HandleUnknown",
		Method:             "POST",
		PathPattern:        "/v1/timeseries/unknown",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &HandleUnknownReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*HandleUnknownOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for HandleUnknown: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  HandleUsage handles usage
*/
func (a *Client) HandleUsage(params *HandleUsageParams, opts ...ClientOption) (*HandleUsageOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewHandleUsageParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "HandleUsage",
		Method:             "POST",
		PathPattern:        "/v1/timeseries/usage",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &HandleUsageReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*HandleUsageOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for HandleUsage: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  HandleViolation handles violation
*/
func (a *Client) HandleViolation(params *HandleViolationParams, opts ...ClientOption) (*HandleViolationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewHandleViolationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "HandleViolation",
		Method:             "POST",
		PathPattern:        "/v1/timeseries/violation",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &HandleViolationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*HandleViolationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for HandleViolation: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}

// Code generated by go-swagger; DO NOT EDIT.

package docs

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new docs API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for docs API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	GetDocs(params *GetDocsParams, opts ...ClientOption) (*GetDocsOK, error)

	GetDocsIndex(params *GetDocsIndexParams, opts ...ClientOption) (*GetDocsIndexOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  GetDocs gets documentation
*/
func (a *Client) GetDocs(params *GetDocsParams, opts ...ClientOption) (*GetDocsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDocsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetDocs",
		Method:             "GET",
		PathPattern:        "/v1/docs/{path}",
		ProducesMediaTypes: []string{"application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDocsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDocsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetDocs: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetDocsIndex gets documentation index
*/
func (a *Client) GetDocsIndex(params *GetDocsIndexParams, opts ...ClientOption) (*GetDocsIndexOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDocsIndexParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetDocsIndex",
		Method:             "GET",
		PathPattern:        "/v1/docs",
		ProducesMediaTypes: []string{"application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDocsIndexReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDocsIndexOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetDocsIndex: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}

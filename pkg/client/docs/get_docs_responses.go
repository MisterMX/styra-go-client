// Code generated by go-swagger; DO NOT EDIT.

package docs

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/mistermx/styra-go-client/pkg/models"
)

// GetDocsReader is a Reader for the GetDocs structure.
type GetDocsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetDocsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetDocsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewGetDocsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetDocsOK creates a GetDocsOK with default headers values
func NewGetDocsOK() *GetDocsOK {
	return &GetDocsOK{}
}

/* GetDocsOK describes a response with status code 200, with default header values.

OK
*/
type GetDocsOK struct {
}

func (o *GetDocsOK) Error() string {
	return fmt.Sprintf("[GET /v1/docs/{path}][%d] getDocsOK ", 200)
}

func (o *GetDocsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetDocsNotFound creates a GetDocsNotFound with default headers values
func NewGetDocsNotFound() *GetDocsNotFound {
	return &GetDocsNotFound{}
}

/* GetDocsNotFound describes a response with status code 404, with default header values.

Not Found
*/
type GetDocsNotFound struct {
	Payload *models.V1ErrorResponse
}

func (o *GetDocsNotFound) Error() string {
	return fmt.Sprintf("[GET /v1/docs/{path}][%d] getDocsNotFound  %+v", 404, o.Payload)
}
func (o *GetDocsNotFound) GetPayload() *models.V1ErrorResponse {
	return o.Payload
}

func (o *GetDocsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.V1ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package systems

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewListSystemsParams creates a new ListSystemsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewListSystemsParams() *ListSystemsParams {
	return &ListSystemsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewListSystemsParamsWithTimeout creates a new ListSystemsParams object
// with the ability to set a timeout on a request.
func NewListSystemsParamsWithTimeout(timeout time.Duration) *ListSystemsParams {
	return &ListSystemsParams{
		timeout: timeout,
	}
}

// NewListSystemsParamsWithContext creates a new ListSystemsParams object
// with the ability to set a context for a request.
func NewListSystemsParamsWithContext(ctx context.Context) *ListSystemsParams {
	return &ListSystemsParams{
		Context: ctx,
	}
}

// NewListSystemsParamsWithHTTPClient creates a new ListSystemsParams object
// with the ability to set a custom HTTPClient for a request.
func NewListSystemsParamsWithHTTPClient(client *http.Client) *ListSystemsParams {
	return &ListSystemsParams{
		HTTPClient: client,
	}
}

/* ListSystemsParams contains all the parameters to send to the API endpoint
   for the list systems operation.

   Typically these are written to a http.Request.
*/
type ListSystemsParams struct {

	/* Authz.

	   set to 'false' to omit authz info from the output
	*/
	Authz *bool

	/* Compact.

	   if set to 'true', returns only minimal configuration information for each system
	*/
	Compact *bool

	/* Datasources.

	   set to 'false' to omit datasources from the output
	*/
	Datasources *bool

	/* Errors.

	   set to 'false' to omit errors/warnings from the output
	*/
	Errors *bool

	/* Metadata.

	   set to 'false' to omit metadata from the output
	*/
	Metadata *bool

	/* Modules.

	   set to 'false' to omit modules from the output
	*/
	Modules *bool

	/* Name.

	   if set returns only systems with a name matching the given regex
	*/
	Name *string

	/* Policies.

	   set to 'false' to omit policies from the output
	*/
	Policies *bool

	/* RuleCounts.

	   set to 'true' to include policy rule counts in the output
	*/
	RuleCounts *bool

	/* Type.

	   if set returns only systems of the specified type
	*/
	Type *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the list systems params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ListSystemsParams) WithDefaults() *ListSystemsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the list systems params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ListSystemsParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the list systems params
func (o *ListSystemsParams) WithTimeout(timeout time.Duration) *ListSystemsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the list systems params
func (o *ListSystemsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the list systems params
func (o *ListSystemsParams) WithContext(ctx context.Context) *ListSystemsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the list systems params
func (o *ListSystemsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the list systems params
func (o *ListSystemsParams) WithHTTPClient(client *http.Client) *ListSystemsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the list systems params
func (o *ListSystemsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAuthz adds the authz to the list systems params
func (o *ListSystemsParams) WithAuthz(authz *bool) *ListSystemsParams {
	o.SetAuthz(authz)
	return o
}

// SetAuthz adds the authz to the list systems params
func (o *ListSystemsParams) SetAuthz(authz *bool) {
	o.Authz = authz
}

// WithCompact adds the compact to the list systems params
func (o *ListSystemsParams) WithCompact(compact *bool) *ListSystemsParams {
	o.SetCompact(compact)
	return o
}

// SetCompact adds the compact to the list systems params
func (o *ListSystemsParams) SetCompact(compact *bool) {
	o.Compact = compact
}

// WithDatasources adds the datasources to the list systems params
func (o *ListSystemsParams) WithDatasources(datasources *bool) *ListSystemsParams {
	o.SetDatasources(datasources)
	return o
}

// SetDatasources adds the datasources to the list systems params
func (o *ListSystemsParams) SetDatasources(datasources *bool) {
	o.Datasources = datasources
}

// WithErrors adds the errors to the list systems params
func (o *ListSystemsParams) WithErrors(errors *bool) *ListSystemsParams {
	o.SetErrors(errors)
	return o
}

// SetErrors adds the errors to the list systems params
func (o *ListSystemsParams) SetErrors(errors *bool) {
	o.Errors = errors
}

// WithMetadata adds the metadata to the list systems params
func (o *ListSystemsParams) WithMetadata(metadata *bool) *ListSystemsParams {
	o.SetMetadata(metadata)
	return o
}

// SetMetadata adds the metadata to the list systems params
func (o *ListSystemsParams) SetMetadata(metadata *bool) {
	o.Metadata = metadata
}

// WithModules adds the modules to the list systems params
func (o *ListSystemsParams) WithModules(modules *bool) *ListSystemsParams {
	o.SetModules(modules)
	return o
}

// SetModules adds the modules to the list systems params
func (o *ListSystemsParams) SetModules(modules *bool) {
	o.Modules = modules
}

// WithName adds the name to the list systems params
func (o *ListSystemsParams) WithName(name *string) *ListSystemsParams {
	o.SetName(name)
	return o
}

// SetName adds the name to the list systems params
func (o *ListSystemsParams) SetName(name *string) {
	o.Name = name
}

// WithPolicies adds the policies to the list systems params
func (o *ListSystemsParams) WithPolicies(policies *bool) *ListSystemsParams {
	o.SetPolicies(policies)
	return o
}

// SetPolicies adds the policies to the list systems params
func (o *ListSystemsParams) SetPolicies(policies *bool) {
	o.Policies = policies
}

// WithRuleCounts adds the ruleCounts to the list systems params
func (o *ListSystemsParams) WithRuleCounts(ruleCounts *bool) *ListSystemsParams {
	o.SetRuleCounts(ruleCounts)
	return o
}

// SetRuleCounts adds the ruleCounts to the list systems params
func (o *ListSystemsParams) SetRuleCounts(ruleCounts *bool) {
	o.RuleCounts = ruleCounts
}

// WithType adds the typeVar to the list systems params
func (o *ListSystemsParams) WithType(typeVar *string) *ListSystemsParams {
	o.SetType(typeVar)
	return o
}

// SetType adds the type to the list systems params
func (o *ListSystemsParams) SetType(typeVar *string) {
	o.Type = typeVar
}

// WriteToRequest writes these params to a swagger request
func (o *ListSystemsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Authz != nil {

		// query param authz
		var qrAuthz bool

		if o.Authz != nil {
			qrAuthz = *o.Authz
		}
		qAuthz := swag.FormatBool(qrAuthz)
		if qAuthz != "" {

			if err := r.SetQueryParam("authz", qAuthz); err != nil {
				return err
			}
		}
	}

	if o.Compact != nil {

		// query param compact
		var qrCompact bool

		if o.Compact != nil {
			qrCompact = *o.Compact
		}
		qCompact := swag.FormatBool(qrCompact)
		if qCompact != "" {

			if err := r.SetQueryParam("compact", qCompact); err != nil {
				return err
			}
		}
	}

	if o.Datasources != nil {

		// query param datasources
		var qrDatasources bool

		if o.Datasources != nil {
			qrDatasources = *o.Datasources
		}
		qDatasources := swag.FormatBool(qrDatasources)
		if qDatasources != "" {

			if err := r.SetQueryParam("datasources", qDatasources); err != nil {
				return err
			}
		}
	}

	if o.Errors != nil {

		// query param errors
		var qrErrors bool

		if o.Errors != nil {
			qrErrors = *o.Errors
		}
		qErrors := swag.FormatBool(qrErrors)
		if qErrors != "" {

			if err := r.SetQueryParam("errors", qErrors); err != nil {
				return err
			}
		}
	}

	if o.Metadata != nil {

		// query param metadata
		var qrMetadata bool

		if o.Metadata != nil {
			qrMetadata = *o.Metadata
		}
		qMetadata := swag.FormatBool(qrMetadata)
		if qMetadata != "" {

			if err := r.SetQueryParam("metadata", qMetadata); err != nil {
				return err
			}
		}
	}

	if o.Modules != nil {

		// query param modules
		var qrModules bool

		if o.Modules != nil {
			qrModules = *o.Modules
		}
		qModules := swag.FormatBool(qrModules)
		if qModules != "" {

			if err := r.SetQueryParam("modules", qModules); err != nil {
				return err
			}
		}
	}

	if o.Name != nil {

		// query param name
		var qrName string

		if o.Name != nil {
			qrName = *o.Name
		}
		qName := qrName
		if qName != "" {

			if err := r.SetQueryParam("name", qName); err != nil {
				return err
			}
		}
	}

	if o.Policies != nil {

		// query param policies
		var qrPolicies bool

		if o.Policies != nil {
			qrPolicies = *o.Policies
		}
		qPolicies := swag.FormatBool(qrPolicies)
		if qPolicies != "" {

			if err := r.SetQueryParam("policies", qPolicies); err != nil {
				return err
			}
		}
	}

	if o.RuleCounts != nil {

		// query param rule_counts
		var qrRuleCounts bool

		if o.RuleCounts != nil {
			qrRuleCounts = *o.RuleCounts
		}
		qRuleCounts := swag.FormatBool(qrRuleCounts)
		if qRuleCounts != "" {

			if err := r.SetQueryParam("rule_counts", qRuleCounts); err != nil {
				return err
			}
		}
	}

	if o.Type != nil {

		// query param type
		var qrType string

		if o.Type != nil {
			qrType = *o.Type
		}
		qType := qrType
		if qType != "" {

			if err := r.SetQueryParam("type", qType); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

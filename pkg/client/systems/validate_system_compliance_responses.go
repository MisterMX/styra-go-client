// Code generated by go-swagger; DO NOT EDIT.

package systems

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/mistermx/styra-go-client/pkg/models"
)

// ValidateSystemComplianceReader is a Reader for the ValidateSystemCompliance structure.
type ValidateSystemComplianceReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ValidateSystemComplianceReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewValidateSystemComplianceOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 202:
		result := NewValidateSystemComplianceAccepted()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewValidateSystemComplianceNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewValidateSystemComplianceOK creates a ValidateSystemComplianceOK with default headers values
func NewValidateSystemComplianceOK() *ValidateSystemComplianceOK {
	return &ValidateSystemComplianceOK{}
}

/* ValidateSystemComplianceOK describes a response with status code 200, with default header values.

OK
*/
type ValidateSystemComplianceOK struct {
	Payload *models.SystemsV1SystemsComplianceResponse
}

func (o *ValidateSystemComplianceOK) Error() string {
	return fmt.Sprintf("[POST /v1/systems/{system}/validate/compliance][%d] validateSystemComplianceOK  %+v", 200, o.Payload)
}
func (o *ValidateSystemComplianceOK) GetPayload() *models.SystemsV1SystemsComplianceResponse {
	return o.Payload
}

func (o *ValidateSystemComplianceOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.SystemsV1SystemsComplianceResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewValidateSystemComplianceAccepted creates a ValidateSystemComplianceAccepted with default headers values
func NewValidateSystemComplianceAccepted() *ValidateSystemComplianceAccepted {
	return &ValidateSystemComplianceAccepted{}
}

/* ValidateSystemComplianceAccepted describes a response with status code 202, with default header values.

Accepted
*/
type ValidateSystemComplianceAccepted struct {
}

func (o *ValidateSystemComplianceAccepted) Error() string {
	return fmt.Sprintf("[POST /v1/systems/{system}/validate/compliance][%d] validateSystemComplianceAccepted ", 202)
}

func (o *ValidateSystemComplianceAccepted) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewValidateSystemComplianceNotFound creates a ValidateSystemComplianceNotFound with default headers values
func NewValidateSystemComplianceNotFound() *ValidateSystemComplianceNotFound {
	return &ValidateSystemComplianceNotFound{}
}

/* ValidateSystemComplianceNotFound describes a response with status code 404, with default header values.

Not Found
*/
type ValidateSystemComplianceNotFound struct {
	Payload *models.MetaV1ErrorResponse
}

func (o *ValidateSystemComplianceNotFound) Error() string {
	return fmt.Sprintf("[POST /v1/systems/{system}/validate/compliance][%d] validateSystemComplianceNotFound  %+v", 404, o.Payload)
}
func (o *ValidateSystemComplianceNotFound) GetPayload() *models.MetaV1ErrorResponse {
	return o.Payload
}

func (o *ValidateSystemComplianceNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.MetaV1ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

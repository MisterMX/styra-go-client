// Code generated by go-swagger; DO NOT EDIT.

package systems

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/mistermx/styra-go-client/pkg/models"
)

// UpdateSystemBundleDeployReader is a Reader for the UpdateSystemBundleDeploy structure.
type UpdateSystemBundleDeployReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateSystemBundleDeployReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateSystemBundleDeployOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewUpdateSystemBundleDeployNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewUpdateSystemBundleDeployConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewUpdateSystemBundleDeployOK creates a UpdateSystemBundleDeployOK with default headers values
func NewUpdateSystemBundleDeployOK() *UpdateSystemBundleDeployOK {
	return &UpdateSystemBundleDeployOK{}
}

/* UpdateSystemBundleDeployOK describes a response with status code 200, with default header values.

OK
*/
type UpdateSystemBundleDeployOK struct {
	Payload *models.V1SystemsPutBundleDeployResponse
}

func (o *UpdateSystemBundleDeployOK) Error() string {
	return fmt.Sprintf("[PUT /v1/systems/{system}/bundle-deploy][%d] updateSystemBundleDeployOK  %+v", 200, o.Payload)
}
func (o *UpdateSystemBundleDeployOK) GetPayload() *models.V1SystemsPutBundleDeployResponse {
	return o.Payload
}

func (o *UpdateSystemBundleDeployOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.V1SystemsPutBundleDeployResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateSystemBundleDeployNotFound creates a UpdateSystemBundleDeployNotFound with default headers values
func NewUpdateSystemBundleDeployNotFound() *UpdateSystemBundleDeployNotFound {
	return &UpdateSystemBundleDeployNotFound{}
}

/* UpdateSystemBundleDeployNotFound describes a response with status code 404, with default header values.

Not Found
*/
type UpdateSystemBundleDeployNotFound struct {
	Payload *models.V1ErrorResponse
}

func (o *UpdateSystemBundleDeployNotFound) Error() string {
	return fmt.Sprintf("[PUT /v1/systems/{system}/bundle-deploy][%d] updateSystemBundleDeployNotFound  %+v", 404, o.Payload)
}
func (o *UpdateSystemBundleDeployNotFound) GetPayload() *models.V1ErrorResponse {
	return o.Payload
}

func (o *UpdateSystemBundleDeployNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.V1ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateSystemBundleDeployConflict creates a UpdateSystemBundleDeployConflict with default headers values
func NewUpdateSystemBundleDeployConflict() *UpdateSystemBundleDeployConflict {
	return &UpdateSystemBundleDeployConflict{}
}

/* UpdateSystemBundleDeployConflict describes a response with status code 409, with default header values.

Conflict
*/
type UpdateSystemBundleDeployConflict struct {
	Payload *models.V1ErrorResponse
}

func (o *UpdateSystemBundleDeployConflict) Error() string {
	return fmt.Sprintf("[PUT /v1/systems/{system}/bundle-deploy][%d] updateSystemBundleDeployConflict  %+v", 409, o.Payload)
}
func (o *UpdateSystemBundleDeployConflict) GetPayload() *models.V1ErrorResponse {
	return o.Payload
}

func (o *UpdateSystemBundleDeployConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.V1ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

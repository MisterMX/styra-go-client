// Code generated by go-swagger; DO NOT EDIT.

package systems

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/mistermx/styra-go-client/pkg/models"
)

// GetOPADiscoveryConfigReader is a Reader for the GetOPADiscoveryConfig structure.
type GetOPADiscoveryConfigReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetOPADiscoveryConfigReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetOPADiscoveryConfigOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 304:
		result := NewGetOPADiscoveryConfigNotModified()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetOPADiscoveryConfigNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetOPADiscoveryConfigOK creates a GetOPADiscoveryConfigOK with default headers values
func NewGetOPADiscoveryConfigOK() *GetOPADiscoveryConfigOK {
	return &GetOPADiscoveryConfigOK{}
}

/* GetOPADiscoveryConfigOK describes a response with status code 200, with default header values.

OK
*/
type GetOPADiscoveryConfigOK struct {
	Payload *models.SystemsV1SystemsGetResponse
}

func (o *GetOPADiscoveryConfigOK) Error() string {
	return fmt.Sprintf("[GET /v1/systems/{system}/discovery][%d] getOPADiscoveryConfigOK  %+v", 200, o.Payload)
}
func (o *GetOPADiscoveryConfigOK) GetPayload() *models.SystemsV1SystemsGetResponse {
	return o.Payload
}

func (o *GetOPADiscoveryConfigOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.SystemsV1SystemsGetResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetOPADiscoveryConfigNotModified creates a GetOPADiscoveryConfigNotModified with default headers values
func NewGetOPADiscoveryConfigNotModified() *GetOPADiscoveryConfigNotModified {
	return &GetOPADiscoveryConfigNotModified{}
}

/* GetOPADiscoveryConfigNotModified describes a response with status code 304, with default header values.

Not Modified
*/
type GetOPADiscoveryConfigNotModified struct {
}

func (o *GetOPADiscoveryConfigNotModified) Error() string {
	return fmt.Sprintf("[GET /v1/systems/{system}/discovery][%d] getOPADiscoveryConfigNotModified ", 304)
}

func (o *GetOPADiscoveryConfigNotModified) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetOPADiscoveryConfigNotFound creates a GetOPADiscoveryConfigNotFound with default headers values
func NewGetOPADiscoveryConfigNotFound() *GetOPADiscoveryConfigNotFound {
	return &GetOPADiscoveryConfigNotFound{}
}

/* GetOPADiscoveryConfigNotFound describes a response with status code 404, with default header values.

Not Found
*/
type GetOPADiscoveryConfigNotFound struct {
	Payload *models.MetaV1ErrorResponse
}

func (o *GetOPADiscoveryConfigNotFound) Error() string {
	return fmt.Sprintf("[GET /v1/systems/{system}/discovery][%d] getOPADiscoveryConfigNotFound  %+v", 404, o.Payload)
}
func (o *GetOPADiscoveryConfigNotFound) GetPayload() *models.MetaV1ErrorResponse {
	return o.Payload
}

func (o *GetOPADiscoveryConfigNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.MetaV1ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package relay_server

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new relay server API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for relay server API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	GetClients(params *GetClientsParams, opts ...ClientOption) (*GetClientsOK, error)

	RegisterClient(params *RegisterClientParams, opts ...ClientOption) (*RegisterClientOK, error)

	RelayDELETE(params *RelayDELETEParams, opts ...ClientOption) (*RelayDELETEOK, error)

	RelayGET(params *RelayGETParams, opts ...ClientOption) (*RelayGETOK, error)

	RelayHEAD(params *RelayHEADParams, opts ...ClientOption) (*RelayHEADOK, error)

	RelayPATCH(params *RelayPATCHParams, opts ...ClientOption) (*RelayPATCHOK, error)

	RelayPOST(params *RelayPOSTParams, opts ...ClientOption) (*RelayPOSTOK, error)

	RelayPUT(params *RelayPUTParams, opts ...ClientOption) (*RelayPUTOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  GetClients gets clients
*/
func (a *Client) GetClients(params *GetClientsParams, opts ...ClientOption) (*GetClientsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetClientsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetClients",
		Method:             "GET",
		PathPattern:        "/v1/relay/clients",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetClientsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetClientsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetClients: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  RegisterClient registers client
*/
func (a *Client) RegisterClient(params *RegisterClientParams, opts ...ClientOption) (*RegisterClientOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRegisterClientParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "RegisterClient",
		Method:             "GET",
		PathPattern:        "/v1/relay/register/{key}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RegisterClientReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RegisterClientOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for RegisterClient: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  RelayDELETE relays HTTP d e l e t e requests
*/
func (a *Client) RelayDELETE(params *RelayDELETEParams, opts ...ClientOption) (*RelayDELETEOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRelayDELETEParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "RelayDELETE",
		Method:             "DELETE",
		PathPattern:        "/v1/relay/{key}/{path}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RelayDELETEReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RelayDELETEOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for RelayDELETE: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  RelayGET relays HTTP g e t requests
*/
func (a *Client) RelayGET(params *RelayGETParams, opts ...ClientOption) (*RelayGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRelayGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "RelayGET",
		Method:             "GET",
		PathPattern:        "/v1/relay/{key}/{path}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RelayGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RelayGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for RelayGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  RelayHEAD relays HTTP h e a d requests
*/
func (a *Client) RelayHEAD(params *RelayHEADParams, opts ...ClientOption) (*RelayHEADOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRelayHEADParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "RelayHEAD",
		Method:             "HEAD",
		PathPattern:        "/v1/relay/{key}/{path}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RelayHEADReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RelayHEADOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for RelayHEAD: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  RelayPATCH relays HTTP p a t c h requests
*/
func (a *Client) RelayPATCH(params *RelayPATCHParams, opts ...ClientOption) (*RelayPATCHOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRelayPATCHParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "RelayPATCH",
		Method:             "PATCH",
		PathPattern:        "/v1/relay/{key}/{path}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RelayPATCHReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RelayPATCHOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for RelayPATCH: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  RelayPOST relays HTTP p o s t requests
*/
func (a *Client) RelayPOST(params *RelayPOSTParams, opts ...ClientOption) (*RelayPOSTOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRelayPOSTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "RelayPOST",
		Method:             "POST",
		PathPattern:        "/v1/relay/{key}/{path}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RelayPOSTReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RelayPOSTOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for RelayPOST: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  RelayPUT relays HTTP p u t requests
*/
func (a *Client) RelayPUT(params *RelayPUTParams, opts ...ClientOption) (*RelayPUTOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRelayPUTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "RelayPUT",
		Method:             "PUT",
		PathPattern:        "/v1/relay/{key}/{path}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RelayPUTReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RelayPUTOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for RelayPUT: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}

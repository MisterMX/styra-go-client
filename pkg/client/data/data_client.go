// Code generated by go-swagger; DO NOT EDIT.

package data

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new data API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for data API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	GetData(params *GetDataParams, opts ...ClientOption) (*GetDataOK, error)

	ListData(params *ListDataParams, opts ...ClientOption) (*ListDataOK, error)

	PatchData(params *PatchDataParams, opts ...ClientOption) (*PatchDataOK, error)

	PutData(params *PutDataParams, opts ...ClientOption) (*PutDataOK, error)

	ShowAllData(params *ShowAllDataParams, opts ...ClientOption) (*ShowAllDataOK, error)

	ShowData(params *ShowDataParams, opts ...ClientOption) (*ShowDataOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  GetData gets data

  Show data at the given `name`.  `name` must be an extension of one of the locations of data as returned by `GET v1/data`
*/
func (a *Client) GetData(params *GetDataParams, opts ...ClientOption) (*GetDataOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDataParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetData",
		Method:             "GET",
		PathPattern:        "/v1/data/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "text/plain"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDataReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDataOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetData: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListData lists data

  Data (whether the result of evaluating policy or the data gathered by datasources) is arranged into a tree.  List the locations within the tree that data exists.
*/
func (a *Client) ListData(params *ListDataParams, opts ...ClientOption) (*ListDataOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListDataParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ListData",
		Method:             "GET",
		PathPattern:        "/v1/data",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "text/plain"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListDataReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListDataOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ListData: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PatchData patches data

  Modify the data of the push datasource registered at `<path>` by applying a JSON patch to the JSON document. The content type for the patch is `application/json-patch+json`. The operation returns the modified data.
*/
func (a *Client) PatchData(params *PatchDataParams, opts ...ClientOption) (*PatchDataOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchDataParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PatchData",
		Method:             "PATCH",
		PathPattern:        "/v1/data/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json-patch+json", "application/vnd.styra.patch+json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchDataReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchDataOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PatchData: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PutData publishes data

  Set the data for the datasource registered at `<name>` to an arbitrary JSON document.  This data can be read by doing `GET v1/data/<path>`
*/
func (a *Client) PutData(params *PutDataParams, opts ...ClientOption) (*PutDataOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutDataParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PutData",
		Method:             "PUT",
		PathPattern:        "/v1/data/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.styra.push+json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutDataReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutDataOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutData: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ShowAllData shows all data
*/
func (a *Client) ShowAllData(params *ShowAllDataParams, opts ...ClientOption) (*ShowAllDataOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewShowAllDataParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ShowAllData",
		Method:             "POST",
		PathPattern:        "/v1/data",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "text/plain"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ShowAllDataReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ShowAllDataOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ShowAllData: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ShowData shows data

  Show data at the given `name`.  `name` must be an extension of one of the locations of data as returned by `GET v1/data`.
*/
func (a *Client) ShowData(params *ShowDataParams, opts ...ClientOption) (*ShowDataOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewShowDataParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ShowData",
		Method:             "POST",
		PathPattern:        "/v1/data/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "text/plain"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ShowDataReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ShowDataOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ShowData: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}

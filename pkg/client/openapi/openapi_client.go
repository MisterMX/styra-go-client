// Code generated by go-swagger; DO NOT EDIT.

package openapi

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new openapi API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for openapi API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	OpenAPIDeprecated(params *OpenAPIDeprecatedParams, opts ...ClientOption) (*OpenAPIDeprecatedOK, error)

	OpenAPIv2(params *OpenAPIv2Params, opts ...ClientOption) (*OpenAPIv2OK, error)

	OpenAPIv3(params *OpenAPIv3Params, opts ...ClientOption) (*OpenAPIv3OK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  OpenAPIDeprecated returns a deprecated version
*/
func (a *Client) OpenAPIDeprecated(params *OpenAPIDeprecatedParams, opts ...ClientOption) (*OpenAPIDeprecatedOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOpenAPIDeprecatedParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "OpenAPIDeprecated",
		Method:             "GET",
		PathPattern:        "/openapi/deprecated/{spec}/{version}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &OpenAPIDeprecatedReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*OpenAPIDeprecatedOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for OpenAPIDeprecated: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  OpenAPIv2 swaggers v2 specification
*/
func (a *Client) OpenAPIv2(params *OpenAPIv2Params, opts ...ClientOption) (*OpenAPIv2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOpenAPIv2Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "OpenAPIv2",
		Method:             "GET",
		PathPattern:        "/openapi/v2",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &OpenAPIv2Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*OpenAPIv2OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for OpenAPIv2: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  OpenAPIv3 opens API v3 specification
*/
func (a *Client) OpenAPIv3(params *OpenAPIv3Params, opts ...ClientOption) (*OpenAPIv3OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOpenAPIv3Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "OpenAPIv3",
		Method:             "GET",
		PathPattern:        "/openapi/v3",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &OpenAPIv3Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*OpenAPIv3OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for OpenAPIv3: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}

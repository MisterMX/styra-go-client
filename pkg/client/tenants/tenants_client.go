// Code generated by go-swagger; DO NOT EDIT.

package tenants

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new tenants API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for tenants API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	TenantActive(params *TenantActiveParams, opts ...ClientOption) (*TenantActiveOK, error)

	TenantState(params *TenantStateParams, opts ...ClientOption) (*TenantStateOK, error)

	UpdateTenants(params *UpdateTenantsParams, opts ...ClientOption) (*UpdateTenantsOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  TenantActive returns status 200 o k if environment and root user for tenant are ready 404 otherwise
*/
func (a *Client) TenantActive(params *TenantActiveParams, opts ...ClientOption) (*TenantActiveOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTenantActiveParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "TenantActive",
		Method:             "GET",
		PathPattern:        "/v1/tenants/active",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &TenantActiveReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TenantActiveOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for TenantActive: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  TenantState tenants state
*/
func (a *Client) TenantState(params *TenantStateParams, opts ...ClientOption) (*TenantStateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTenantStateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "TenantState",
		Method:             "GET",
		PathPattern:        "/v1/tenants/state",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &TenantStateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TenantStateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for TenantState: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateTenants receives a tenant list to update the system
*/
func (a *Client) UpdateTenants(params *UpdateTenantsParams, opts ...ClientOption) (*UpdateTenantsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateTenantsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateTenants",
		Method:             "PUT",
		PathPattern:        "/v1/tenants",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateTenantsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateTenantsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UpdateTenants: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}

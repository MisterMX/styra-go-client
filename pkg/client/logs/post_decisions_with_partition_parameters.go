// Code generated by go-swagger; DO NOT EDIT.

package logs

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"

	"github.com/mistermx/styra-go-client/pkg/models"
)

// NewPostDecisionsWithPartitionParams creates a new PostDecisionsWithPartitionParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewPostDecisionsWithPartitionParams() *PostDecisionsWithPartitionParams {
	return &PostDecisionsWithPartitionParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewPostDecisionsWithPartitionParamsWithTimeout creates a new PostDecisionsWithPartitionParams object
// with the ability to set a timeout on a request.
func NewPostDecisionsWithPartitionParamsWithTimeout(timeout time.Duration) *PostDecisionsWithPartitionParams {
	return &PostDecisionsWithPartitionParams{
		timeout: timeout,
	}
}

// NewPostDecisionsWithPartitionParamsWithContext creates a new PostDecisionsWithPartitionParams object
// with the ability to set a context for a request.
func NewPostDecisionsWithPartitionParamsWithContext(ctx context.Context) *PostDecisionsWithPartitionParams {
	return &PostDecisionsWithPartitionParams{
		Context: ctx,
	}
}

// NewPostDecisionsWithPartitionParamsWithHTTPClient creates a new PostDecisionsWithPartitionParams object
// with the ability to set a custom HTTPClient for a request.
func NewPostDecisionsWithPartitionParamsWithHTTPClient(client *http.Client) *PostDecisionsWithPartitionParams {
	return &PostDecisionsWithPartitionParams{
		HTTPClient: client,
	}
}

/* PostDecisionsWithPartitionParams contains all the parameters to send to the API endpoint
   for the post decisions with partition operation.

   Typically these are written to a http.Request.
*/
type PostDecisionsWithPartitionParams struct {

	// Body.
	Body []models.MetaV1RequestObject

	/* Partition.

	   partition name. Currently not used
	*/
	Partition string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the post decisions with partition params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *PostDecisionsWithPartitionParams) WithDefaults() *PostDecisionsWithPartitionParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the post decisions with partition params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *PostDecisionsWithPartitionParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the post decisions with partition params
func (o *PostDecisionsWithPartitionParams) WithTimeout(timeout time.Duration) *PostDecisionsWithPartitionParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the post decisions with partition params
func (o *PostDecisionsWithPartitionParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the post decisions with partition params
func (o *PostDecisionsWithPartitionParams) WithContext(ctx context.Context) *PostDecisionsWithPartitionParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the post decisions with partition params
func (o *PostDecisionsWithPartitionParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the post decisions with partition params
func (o *PostDecisionsWithPartitionParams) WithHTTPClient(client *http.Client) *PostDecisionsWithPartitionParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the post decisions with partition params
func (o *PostDecisionsWithPartitionParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithBody adds the body to the post decisions with partition params
func (o *PostDecisionsWithPartitionParams) WithBody(body []models.MetaV1RequestObject) *PostDecisionsWithPartitionParams {
	o.SetBody(body)
	return o
}

// SetBody adds the body to the post decisions with partition params
func (o *PostDecisionsWithPartitionParams) SetBody(body []models.MetaV1RequestObject) {
	o.Body = body
}

// WithPartition adds the partition to the post decisions with partition params
func (o *PostDecisionsWithPartitionParams) WithPartition(partition string) *PostDecisionsWithPartitionParams {
	o.SetPartition(partition)
	return o
}

// SetPartition adds the partition to the post decisions with partition params
func (o *PostDecisionsWithPartitionParams) SetPartition(partition string) {
	o.Partition = partition
}

// WriteToRequest writes these params to a swagger request
func (o *PostDecisionsWithPartitionParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error
	if o.Body != nil {
		if err := r.SetBodyParam(o.Body); err != nil {
			return err
		}
	}

	// path param partition
	if err := r.SetPathParam("partition", o.Partition); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

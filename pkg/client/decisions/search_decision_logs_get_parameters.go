// Code generated by go-swagger; DO NOT EDIT.

package decisions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewSearchDecisionLogsGetParams creates a new SearchDecisionLogsGetParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewSearchDecisionLogsGetParams() *SearchDecisionLogsGetParams {
	return &SearchDecisionLogsGetParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewSearchDecisionLogsGetParamsWithTimeout creates a new SearchDecisionLogsGetParams object
// with the ability to set a timeout on a request.
func NewSearchDecisionLogsGetParamsWithTimeout(timeout time.Duration) *SearchDecisionLogsGetParams {
	return &SearchDecisionLogsGetParams{
		timeout: timeout,
	}
}

// NewSearchDecisionLogsGetParamsWithContext creates a new SearchDecisionLogsGetParams object
// with the ability to set a context for a request.
func NewSearchDecisionLogsGetParamsWithContext(ctx context.Context) *SearchDecisionLogsGetParams {
	return &SearchDecisionLogsGetParams{
		Context: ctx,
	}
}

// NewSearchDecisionLogsGetParamsWithHTTPClient creates a new SearchDecisionLogsGetParams object
// with the ability to set a custom HTTPClient for a request.
func NewSearchDecisionLogsGetParamsWithHTTPClient(client *http.Client) *SearchDecisionLogsGetParams {
	return &SearchDecisionLogsGetParams{
		HTTPClient: client,
	}
}

/* SearchDecisionLogsGetParams contains all the parameters to send to the API endpoint
   for the search decision logs get operation.

   Typically these are written to a http.Request.
*/
type SearchDecisionLogsGetParams struct {

	/* Compact.

	   return only essential decision fields
	*/
	Compact *bool

	/* Cursor.

	   continue from cursor position of previous query
	*/
	Cursor *string

	/* DefaultTimezone.

	   client time zone offset e.g. -07:00, +3:00, Z. Local time expressions in query are adjusted with this offset
	*/
	DefaultTimezone *string

	/* EndTime.

	   maximum decision time
	*/
	EndTime *string

	/* Limit.

	   maximum number of decisions to return
	*/
	Limit *int64

	/* Order.

	   ASC, DESC (default)
	*/
	Order *string

	/* ResultKind.

	   comma-separated list of ALL, UNKNOWN, ADVICE, ALLOWED, DENIED, ERROR
	*/
	ResultKind *string

	/* Search.

	   search query
	*/
	Search *string

	/* Stack.

	   stack ID
	*/
	Stack *string

	/* StartTime.

	   minimum decision time
	*/
	StartTime *string

	/* System.

	   system ID
	*/
	System *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the search decision logs get params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *SearchDecisionLogsGetParams) WithDefaults() *SearchDecisionLogsGetParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the search decision logs get params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *SearchDecisionLogsGetParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the search decision logs get params
func (o *SearchDecisionLogsGetParams) WithTimeout(timeout time.Duration) *SearchDecisionLogsGetParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the search decision logs get params
func (o *SearchDecisionLogsGetParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the search decision logs get params
func (o *SearchDecisionLogsGetParams) WithContext(ctx context.Context) *SearchDecisionLogsGetParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the search decision logs get params
func (o *SearchDecisionLogsGetParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the search decision logs get params
func (o *SearchDecisionLogsGetParams) WithHTTPClient(client *http.Client) *SearchDecisionLogsGetParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the search decision logs get params
func (o *SearchDecisionLogsGetParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCompact adds the compact to the search decision logs get params
func (o *SearchDecisionLogsGetParams) WithCompact(compact *bool) *SearchDecisionLogsGetParams {
	o.SetCompact(compact)
	return o
}

// SetCompact adds the compact to the search decision logs get params
func (o *SearchDecisionLogsGetParams) SetCompact(compact *bool) {
	o.Compact = compact
}

// WithCursor adds the cursor to the search decision logs get params
func (o *SearchDecisionLogsGetParams) WithCursor(cursor *string) *SearchDecisionLogsGetParams {
	o.SetCursor(cursor)
	return o
}

// SetCursor adds the cursor to the search decision logs get params
func (o *SearchDecisionLogsGetParams) SetCursor(cursor *string) {
	o.Cursor = cursor
}

// WithDefaultTimezone adds the defaultTimezone to the search decision logs get params
func (o *SearchDecisionLogsGetParams) WithDefaultTimezone(defaultTimezone *string) *SearchDecisionLogsGetParams {
	o.SetDefaultTimezone(defaultTimezone)
	return o
}

// SetDefaultTimezone adds the defaultTimezone to the search decision logs get params
func (o *SearchDecisionLogsGetParams) SetDefaultTimezone(defaultTimezone *string) {
	o.DefaultTimezone = defaultTimezone
}

// WithEndTime adds the endTime to the search decision logs get params
func (o *SearchDecisionLogsGetParams) WithEndTime(endTime *string) *SearchDecisionLogsGetParams {
	o.SetEndTime(endTime)
	return o
}

// SetEndTime adds the endTime to the search decision logs get params
func (o *SearchDecisionLogsGetParams) SetEndTime(endTime *string) {
	o.EndTime = endTime
}

// WithLimit adds the limit to the search decision logs get params
func (o *SearchDecisionLogsGetParams) WithLimit(limit *int64) *SearchDecisionLogsGetParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the search decision logs get params
func (o *SearchDecisionLogsGetParams) SetLimit(limit *int64) {
	o.Limit = limit
}

// WithOrder adds the order to the search decision logs get params
func (o *SearchDecisionLogsGetParams) WithOrder(order *string) *SearchDecisionLogsGetParams {
	o.SetOrder(order)
	return o
}

// SetOrder adds the order to the search decision logs get params
func (o *SearchDecisionLogsGetParams) SetOrder(order *string) {
	o.Order = order
}

// WithResultKind adds the resultKind to the search decision logs get params
func (o *SearchDecisionLogsGetParams) WithResultKind(resultKind *string) *SearchDecisionLogsGetParams {
	o.SetResultKind(resultKind)
	return o
}

// SetResultKind adds the resultKind to the search decision logs get params
func (o *SearchDecisionLogsGetParams) SetResultKind(resultKind *string) {
	o.ResultKind = resultKind
}

// WithSearch adds the search to the search decision logs get params
func (o *SearchDecisionLogsGetParams) WithSearch(search *string) *SearchDecisionLogsGetParams {
	o.SetSearch(search)
	return o
}

// SetSearch adds the search to the search decision logs get params
func (o *SearchDecisionLogsGetParams) SetSearch(search *string) {
	o.Search = search
}

// WithStack adds the stack to the search decision logs get params
func (o *SearchDecisionLogsGetParams) WithStack(stack *string) *SearchDecisionLogsGetParams {
	o.SetStack(stack)
	return o
}

// SetStack adds the stack to the search decision logs get params
func (o *SearchDecisionLogsGetParams) SetStack(stack *string) {
	o.Stack = stack
}

// WithStartTime adds the startTime to the search decision logs get params
func (o *SearchDecisionLogsGetParams) WithStartTime(startTime *string) *SearchDecisionLogsGetParams {
	o.SetStartTime(startTime)
	return o
}

// SetStartTime adds the startTime to the search decision logs get params
func (o *SearchDecisionLogsGetParams) SetStartTime(startTime *string) {
	o.StartTime = startTime
}

// WithSystem adds the system to the search decision logs get params
func (o *SearchDecisionLogsGetParams) WithSystem(system *string) *SearchDecisionLogsGetParams {
	o.SetSystem(system)
	return o
}

// SetSystem adds the system to the search decision logs get params
func (o *SearchDecisionLogsGetParams) SetSystem(system *string) {
	o.System = system
}

// WriteToRequest writes these params to a swagger request
func (o *SearchDecisionLogsGetParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Compact != nil {

		// query param compact
		var qrCompact bool

		if o.Compact != nil {
			qrCompact = *o.Compact
		}
		qCompact := swag.FormatBool(qrCompact)
		if qCompact != "" {

			if err := r.SetQueryParam("compact", qCompact); err != nil {
				return err
			}
		}
	}

	if o.Cursor != nil {

		// query param cursor
		var qrCursor string

		if o.Cursor != nil {
			qrCursor = *o.Cursor
		}
		qCursor := qrCursor
		if qCursor != "" {

			if err := r.SetQueryParam("cursor", qCursor); err != nil {
				return err
			}
		}
	}

	if o.DefaultTimezone != nil {

		// query param default_timezone
		var qrDefaultTimezone string

		if o.DefaultTimezone != nil {
			qrDefaultTimezone = *o.DefaultTimezone
		}
		qDefaultTimezone := qrDefaultTimezone
		if qDefaultTimezone != "" {

			if err := r.SetQueryParam("default_timezone", qDefaultTimezone); err != nil {
				return err
			}
		}
	}

	if o.EndTime != nil {

		// query param end_time
		var qrEndTime string

		if o.EndTime != nil {
			qrEndTime = *o.EndTime
		}
		qEndTime := qrEndTime
		if qEndTime != "" {

			if err := r.SetQueryParam("end_time", qEndTime); err != nil {
				return err
			}
		}
	}

	if o.Limit != nil {

		// query param limit
		var qrLimit int64

		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatInt64(qrLimit)
		if qLimit != "" {

			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}
	}

	if o.Order != nil {

		// query param order
		var qrOrder string

		if o.Order != nil {
			qrOrder = *o.Order
		}
		qOrder := qrOrder
		if qOrder != "" {

			if err := r.SetQueryParam("order", qOrder); err != nil {
				return err
			}
		}
	}

	if o.ResultKind != nil {

		// query param result_kind
		var qrResultKind string

		if o.ResultKind != nil {
			qrResultKind = *o.ResultKind
		}
		qResultKind := qrResultKind
		if qResultKind != "" {

			if err := r.SetQueryParam("result_kind", qResultKind); err != nil {
				return err
			}
		}
	}

	if o.Search != nil {

		// query param search
		var qrSearch string

		if o.Search != nil {
			qrSearch = *o.Search
		}
		qSearch := qrSearch
		if qSearch != "" {

			if err := r.SetQueryParam("search", qSearch); err != nil {
				return err
			}
		}
	}

	if o.Stack != nil {

		// query param stack
		var qrStack string

		if o.Stack != nil {
			qrStack = *o.Stack
		}
		qStack := qrStack
		if qStack != "" {

			if err := r.SetQueryParam("stack", qStack); err != nil {
				return err
			}
		}
	}

	if o.StartTime != nil {

		// query param start_time
		var qrStartTime string

		if o.StartTime != nil {
			qrStartTime = *o.StartTime
		}
		qStartTime := qrStartTime
		if qStartTime != "" {

			if err := r.SetQueryParam("start_time", qStartTime); err != nil {
				return err
			}
		}
	}

	if o.System != nil {

		// query param system
		var qrSystem string

		if o.System != nil {
			qrSystem = *o.System
		}
		qSystem := qrSystem
		if qSystem != "" {

			if err := r.SetQueryParam("system", qSystem); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

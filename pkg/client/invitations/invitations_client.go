// Code generated by go-swagger; DO NOT EDIT.

package invitations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new invitations API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for invitations API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	AcceptInvitation(params *AcceptInvitationParams, opts ...ClientOption) (*AcceptInvitationOK, error)

	CreateInvitation(params *CreateInvitationParams, opts ...ClientOption) (*CreateInvitationOK, error)

	GetInvitation(params *GetInvitationParams, opts ...ClientOption) (*GetInvitationOK, error)

	ListInvitations(params *ListInvitationsParams, opts ...ClientOption) (*ListInvitationsOK, error)

	RevokeInvitation(params *RevokeInvitationParams, opts ...ClientOption) (*RevokeInvitationOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  AcceptInvitation accepts invitation
*/
func (a *Client) AcceptInvitation(params *AcceptInvitationParams, opts ...ClientOption) (*AcceptInvitationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAcceptInvitationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "AcceptInvitation",
		Method:             "PUT",
		PathPattern:        "/v1/invitations/{token}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AcceptInvitationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AcceptInvitationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for AcceptInvitation: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateInvitation invites user
*/
func (a *Client) CreateInvitation(params *CreateInvitationParams, opts ...ClientOption) (*CreateInvitationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateInvitationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Create invitation",
		Method:             "POST",
		PathPattern:        "/v1/invitations",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateInvitationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateInvitationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Create invitation: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetInvitation gets invitation
*/
func (a *Client) GetInvitation(params *GetInvitationParams, opts ...ClientOption) (*GetInvitationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetInvitationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetInvitation",
		Method:             "GET",
		PathPattern:        "/v1/invitations/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetInvitationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetInvitationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetInvitation: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListInvitations lists invitations
*/
func (a *Client) ListInvitations(params *ListInvitationsParams, opts ...ClientOption) (*ListInvitationsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListInvitationsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ListInvitations",
		Method:             "GET",
		PathPattern:        "/v1/invitations",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListInvitationsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListInvitationsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ListInvitations: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  RevokeInvitation revokes invitation
*/
func (a *Client) RevokeInvitation(params *RevokeInvitationParams, opts ...ClientOption) (*RevokeInvitationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRevokeInvitationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "RevokeInvitation",
		Method:             "DELETE",
		PathPattern:        "/v1/invitations/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RevokeInvitationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RevokeInvitationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for RevokeInvitation: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}

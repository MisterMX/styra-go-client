// Code generated by go-swagger; DO NOT EDIT.

package tenants_config

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/mistermx/styra-go-client/pkg/models"
)

// GetTenantConfigReader is a Reader for the GetTenantConfig structure.
type GetTenantConfigReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetTenantConfigReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetTenantConfigOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetTenantConfigBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetTenantConfigNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetTenantConfigOK creates a GetTenantConfigOK with default headers values
func NewGetTenantConfigOK() *GetTenantConfigOK {
	return &GetTenantConfigOK{}
}

/* GetTenantConfigOK describes a response with status code 200, with default header values.

OK
*/
type GetTenantConfigOK struct {
	Payload *models.V1TenantConfigGetResponse
}

func (o *GetTenantConfigOK) Error() string {
	return fmt.Sprintf("[GET /v1/tenants-config][%d] getTenantConfigOK  %+v", 200, o.Payload)
}
func (o *GetTenantConfigOK) GetPayload() *models.V1TenantConfigGetResponse {
	return o.Payload
}

func (o *GetTenantConfigOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.V1TenantConfigGetResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetTenantConfigBadRequest creates a GetTenantConfigBadRequest with default headers values
func NewGetTenantConfigBadRequest() *GetTenantConfigBadRequest {
	return &GetTenantConfigBadRequest{}
}

/* GetTenantConfigBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type GetTenantConfigBadRequest struct {
	Payload *models.V1ErrorResponse
}

func (o *GetTenantConfigBadRequest) Error() string {
	return fmt.Sprintf("[GET /v1/tenants-config][%d] getTenantConfigBadRequest  %+v", 400, o.Payload)
}
func (o *GetTenantConfigBadRequest) GetPayload() *models.V1ErrorResponse {
	return o.Payload
}

func (o *GetTenantConfigBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.V1ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetTenantConfigNotFound creates a GetTenantConfigNotFound with default headers values
func NewGetTenantConfigNotFound() *GetTenantConfigNotFound {
	return &GetTenantConfigNotFound{}
}

/* GetTenantConfigNotFound describes a response with status code 404, with default header values.

Not found
*/
type GetTenantConfigNotFound struct {
	Payload *models.V1ErrorResponse
}

func (o *GetTenantConfigNotFound) Error() string {
	return fmt.Sprintf("[GET /v1/tenants-config][%d] getTenantConfigNotFound  %+v", 404, o.Payload)
}
func (o *GetTenantConfigNotFound) GetPayload() *models.V1ErrorResponse {
	return o.Payload
}

func (o *GetTenantConfigNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.V1ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

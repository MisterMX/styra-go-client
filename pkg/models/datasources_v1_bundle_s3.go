// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DatasourcesV1BundleS3 bundle/s3
// Example: {"bucket":"foo","category":"bundle/s3","credentials":"s3_creds","endpoint":"https://s3.example.com","on_premises":false,"path":"bar/xyz","region":"us-east-1","type":"pull"}
//
// swagger:model datasources.v1.Bundle.S3
type DatasourcesV1BundleS3 struct {
	DatasourcesV1Common

	DatasourcesV1Poller

	DatasourcesV1AWSCommon

	// S3 Bucket
	// Required: true
	Bucket *string `json:"bucket"`

	// Endpoint to S3 storage
	Endpoint string `json:"endpoint,omitempty"`

	// S3 Path within a Bucket
	// Required: true
	Path *string `json:"path"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *DatasourcesV1BundleS3) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 DatasourcesV1Common
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.DatasourcesV1Common = aO0

	// AO1
	var aO1 DatasourcesV1Poller
	if err := swag.ReadJSON(raw, &aO1); err != nil {
		return err
	}
	m.DatasourcesV1Poller = aO1

	// AO2
	var aO2 DatasourcesV1AWSCommon
	if err := swag.ReadJSON(raw, &aO2); err != nil {
		return err
	}
	m.DatasourcesV1AWSCommon = aO2

	// AO3
	var dataAO3 struct {
		Bucket *string `json:"bucket"`

		Endpoint string `json:"endpoint,omitempty"`

		Path *string `json:"path"`
	}
	if err := swag.ReadJSON(raw, &dataAO3); err != nil {
		return err
	}

	m.Bucket = dataAO3.Bucket

	m.Endpoint = dataAO3.Endpoint

	m.Path = dataAO3.Path

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m DatasourcesV1BundleS3) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 4)

	aO0, err := swag.WriteJSON(m.DatasourcesV1Common)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	aO1, err := swag.WriteJSON(m.DatasourcesV1Poller)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO1)

	aO2, err := swag.WriteJSON(m.DatasourcesV1AWSCommon)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO2)
	var dataAO3 struct {
		Bucket *string `json:"bucket"`

		Endpoint string `json:"endpoint,omitempty"`

		Path *string `json:"path"`
	}

	dataAO3.Bucket = m.Bucket

	dataAO3.Endpoint = m.Endpoint

	dataAO3.Path = m.Path

	jsonDataAO3, errAO3 := swag.WriteJSON(dataAO3)
	if errAO3 != nil {
		return nil, errAO3
	}
	_parts = append(_parts, jsonDataAO3)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this datasources v1 bundle s3
func (m *DatasourcesV1BundleS3) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with DatasourcesV1Common
	if err := m.DatasourcesV1Common.Validate(formats); err != nil {
		res = append(res, err)
	}
	// validation for a type composition with DatasourcesV1Poller
	if err := m.DatasourcesV1Poller.Validate(formats); err != nil {
		res = append(res, err)
	}
	// validation for a type composition with DatasourcesV1AWSCommon
	if err := m.DatasourcesV1AWSCommon.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBucket(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePath(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DatasourcesV1BundleS3) validateBucket(formats strfmt.Registry) error {

	if err := validate.Required("bucket", "body", m.Bucket); err != nil {
		return err
	}

	return nil
}

func (m *DatasourcesV1BundleS3) validatePath(formats strfmt.Registry) error {

	if err := validate.Required("path", "body", m.Path); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this datasources v1 bundle s3 based on the context it is used
func (m *DatasourcesV1BundleS3) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with DatasourcesV1Common
	if err := m.DatasourcesV1Common.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}
	// validation for a type composition with DatasourcesV1Poller
	if err := m.DatasourcesV1Poller.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}
	// validation for a type composition with DatasourcesV1AWSCommon
	if err := m.DatasourcesV1AWSCommon.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (m *DatasourcesV1BundleS3) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DatasourcesV1BundleS3) UnmarshalBinary(b []byte) error {
	var res DatasourcesV1BundleS3
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

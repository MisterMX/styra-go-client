// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// V2RoleBindingsPutRequest v2 role bindings put request
//
// swagger:model v2.RoleBindingsPutRequest
type V2RoleBindingsPutRequest struct {

	// resource filter
	// Required: true
	ResourceFilter *V2ResourceFilter `json:"resource_filter"`

	// rolebindings
	// Required: true
	Rolebindings *V2ComposedRoleBindings `json:"rolebindings"`
}

// Validate validates this v2 role bindings put request
func (m *V2RoleBindingsPutRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateResourceFilter(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRolebindings(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V2RoleBindingsPutRequest) validateResourceFilter(formats strfmt.Registry) error {

	if err := validate.Required("resource_filter", "body", m.ResourceFilter); err != nil {
		return err
	}

	if m.ResourceFilter != nil {
		if err := m.ResourceFilter.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("resource_filter")
			}
			return err
		}
	}

	return nil
}

func (m *V2RoleBindingsPutRequest) validateRolebindings(formats strfmt.Registry) error {

	if err := validate.Required("rolebindings", "body", m.Rolebindings); err != nil {
		return err
	}

	if m.Rolebindings != nil {
		if err := m.Rolebindings.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("rolebindings")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this v2 role bindings put request based on the context it is used
func (m *V2RoleBindingsPutRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateResourceFilter(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRolebindings(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V2RoleBindingsPutRequest) contextValidateResourceFilter(ctx context.Context, formats strfmt.Registry) error {

	if m.ResourceFilter != nil {
		if err := m.ResourceFilter.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("resource_filter")
			}
			return err
		}
	}

	return nil
}

func (m *V2RoleBindingsPutRequest) contextValidateRolebindings(ctx context.Context, formats strfmt.Registry) error {

	if m.Rolebindings != nil {
		if err := m.Rolebindings.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("rolebindings")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V2RoleBindingsPutRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V2RoleBindingsPutRequest) UnmarshalBinary(b []byte) error {
	var res V2RoleBindingsPutRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

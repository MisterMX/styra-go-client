// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DatasourcesBundleS3 bundle/s3
// Example: {"bucket":"foo","category":"bundle/s3","credentials":"s3_creds","endpoint":"https://s3.example.com","on_premises":false,"path":"bar/xyz","region":"us-east-1","type":"pull"}
//
// swagger:model datasources.Bundle.S3
type DatasourcesBundleS3 struct {
	DatasourcesCommon

	DatasourcesPoller

	DatasourcesAWSCommon

	// S3 Bucket
	// Required: true
	Bucket *string `json:"bucket"`

	// Must be `bundle/s3`
	Category interface{} `json:"category,omitempty"`

	// Endpoint to S3 storage
	Endpoint string `json:"endpoint,omitempty"`

	// S3 Path within a Bucket
	// Required: true
	Path *string `json:"path"`

	// Must be `pull`
	Type interface{} `json:"type,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *DatasourcesBundleS3) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 DatasourcesCommon
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.DatasourcesCommon = aO0

	// AO1
	var aO1 DatasourcesPoller
	if err := swag.ReadJSON(raw, &aO1); err != nil {
		return err
	}
	m.DatasourcesPoller = aO1

	// AO2
	var aO2 DatasourcesAWSCommon
	if err := swag.ReadJSON(raw, &aO2); err != nil {
		return err
	}
	m.DatasourcesAWSCommon = aO2

	// AO3
	var dataAO3 struct {
		Bucket *string `json:"bucket"`

		Category interface{} `json:"category,omitempty"`

		Endpoint string `json:"endpoint,omitempty"`

		Path *string `json:"path"`

		Type interface{} `json:"type,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO3); err != nil {
		return err
	}

	m.Bucket = dataAO3.Bucket

	m.Category = dataAO3.Category

	m.Endpoint = dataAO3.Endpoint

	m.Path = dataAO3.Path

	m.Type = dataAO3.Type

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m DatasourcesBundleS3) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 4)

	aO0, err := swag.WriteJSON(m.DatasourcesCommon)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	aO1, err := swag.WriteJSON(m.DatasourcesPoller)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO1)

	aO2, err := swag.WriteJSON(m.DatasourcesAWSCommon)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO2)
	var dataAO3 struct {
		Bucket *string `json:"bucket"`

		Category interface{} `json:"category,omitempty"`

		Endpoint string `json:"endpoint,omitempty"`

		Path *string `json:"path"`

		Type interface{} `json:"type,omitempty"`
	}

	dataAO3.Bucket = m.Bucket

	dataAO3.Category = m.Category

	dataAO3.Endpoint = m.Endpoint

	dataAO3.Path = m.Path

	dataAO3.Type = m.Type

	jsonDataAO3, errAO3 := swag.WriteJSON(dataAO3)
	if errAO3 != nil {
		return nil, errAO3
	}
	_parts = append(_parts, jsonDataAO3)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this datasources bundle s3
func (m *DatasourcesBundleS3) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with DatasourcesCommon
	if err := m.DatasourcesCommon.Validate(formats); err != nil {
		res = append(res, err)
	}
	// validation for a type composition with DatasourcesPoller
	if err := m.DatasourcesPoller.Validate(formats); err != nil {
		res = append(res, err)
	}
	// validation for a type composition with DatasourcesAWSCommon
	if err := m.DatasourcesAWSCommon.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBucket(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePath(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DatasourcesBundleS3) validateBucket(formats strfmt.Registry) error {

	if err := validate.Required("bucket", "body", m.Bucket); err != nil {
		return err
	}

	return nil
}

func (m *DatasourcesBundleS3) validatePath(formats strfmt.Registry) error {

	if err := validate.Required("path", "body", m.Path); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this datasources bundle s3 based on the context it is used
func (m *DatasourcesBundleS3) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with DatasourcesCommon
	if err := m.DatasourcesCommon.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}
	// validation for a type composition with DatasourcesPoller
	if err := m.DatasourcesPoller.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}
	// validation for a type composition with DatasourcesAWSCommon
	if err := m.DatasourcesAWSCommon.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (m *DatasourcesBundleS3) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DatasourcesBundleS3) UnmarshalBinary(b []byte) error {
	var res DatasourcesBundleS3
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// V2Subject v2 subject
//
// swagger:model v2.Subject
type V2Subject struct {

	// claim config
	ClaimConfig *V2ClaimConfig `json:"claim_config,omitempty"`

	// id
	// Required: true
	ID *string `json:"id"`

	// kind
	// Required: true
	Kind *string `json:"kind"`
}

// Validate validates this v2 subject
func (m *V2Subject) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateClaimConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKind(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V2Subject) validateClaimConfig(formats strfmt.Registry) error {
	if swag.IsZero(m.ClaimConfig) { // not required
		return nil
	}

	if m.ClaimConfig != nil {
		if err := m.ClaimConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("claim_config")
			}
			return err
		}
	}

	return nil
}

func (m *V2Subject) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *V2Subject) validateKind(formats strfmt.Registry) error {

	if err := validate.Required("kind", "body", m.Kind); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this v2 subject based on the context it is used
func (m *V2Subject) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateClaimConfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V2Subject) contextValidateClaimConfig(ctx context.Context, formats strfmt.Registry) error {

	if m.ClaimConfig != nil {
		if err := m.ClaimConfig.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("claim_config")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V2Subject) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V2Subject) UnmarshalBinary(b []byte) error {
	var res V2Subject
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

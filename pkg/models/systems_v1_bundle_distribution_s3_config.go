// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SystemsV1BundleDistributionS3Config systems v1 bundle distribution s3 config
//
// swagger:model systems.v1.BundleDistributionS3Config
type SystemsV1BundleDistributionS3Config struct {

	// access key id and secret access key are looked under the key <name>/<access_keys>
	AccessKeys string `json:"access_keys,omitempty"`

	// bucket name
	// Required: true
	Bucket *string `json:"bucket"`

	// discovery bundle path
	// Required: true
	DiscoveryPath *string `json:"discovery_path"`

	// AWS endpoint
	Endpoint string `json:"endpoint,omitempty"`

	// if provided, OPA uses this 'services[_].credentials.s3_signing' config to connect directly to S3 for bundle downloads
	OpaCredentials *SystemsV1BundleDistributionS3ConfigOpaCredentials `json:"opa_credentials,omitempty"`

	// bundle path
	// Required: true
	PolicyPath *string `json:"policy_path"`

	// AWS region
	// Required: true
	Region *string `json:"region"`
}

// Validate validates this systems v1 bundle distribution s3 config
func (m *SystemsV1BundleDistributionS3Config) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBucket(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDiscoveryPath(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOpaCredentials(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePolicyPath(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRegion(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SystemsV1BundleDistributionS3Config) validateBucket(formats strfmt.Registry) error {

	if err := validate.Required("bucket", "body", m.Bucket); err != nil {
		return err
	}

	return nil
}

func (m *SystemsV1BundleDistributionS3Config) validateDiscoveryPath(formats strfmt.Registry) error {

	if err := validate.Required("discovery_path", "body", m.DiscoveryPath); err != nil {
		return err
	}

	return nil
}

func (m *SystemsV1BundleDistributionS3Config) validateOpaCredentials(formats strfmt.Registry) error {
	if swag.IsZero(m.OpaCredentials) { // not required
		return nil
	}

	if m.OpaCredentials != nil {
		if err := m.OpaCredentials.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("opa_credentials")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("opa_credentials")
			}
			return err
		}
	}

	return nil
}

func (m *SystemsV1BundleDistributionS3Config) validatePolicyPath(formats strfmt.Registry) error {

	if err := validate.Required("policy_path", "body", m.PolicyPath); err != nil {
		return err
	}

	return nil
}

func (m *SystemsV1BundleDistributionS3Config) validateRegion(formats strfmt.Registry) error {

	if err := validate.Required("region", "body", m.Region); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this systems v1 bundle distribution s3 config based on the context it is used
func (m *SystemsV1BundleDistributionS3Config) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateOpaCredentials(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SystemsV1BundleDistributionS3Config) contextValidateOpaCredentials(ctx context.Context, formats strfmt.Registry) error {

	if m.OpaCredentials != nil {
		if err := m.OpaCredentials.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("opa_credentials")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("opa_credentials")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SystemsV1BundleDistributionS3Config) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SystemsV1BundleDistributionS3Config) UnmarshalBinary(b []byte) error {
	var res SystemsV1BundleDistributionS3Config
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

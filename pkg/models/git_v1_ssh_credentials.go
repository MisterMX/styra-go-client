// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GitV1SSHCredentials git v1 SSH credentials
//
// swagger:model git.v1.SSHCredentials
type GitV1SSHCredentials struct {

	// Passphrase is looked under the key passphrase/<pass>
	// Required: true
	Passphrase *string `json:"passphrase"`

	// PrivateKey is looked under the key private-key/<key>
	// Required: true
	PrivateKey *string `json:"private_key"`
}

// Validate validates this git v1 SSH credentials
func (m *GitV1SSHCredentials) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePassphrase(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePrivateKey(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GitV1SSHCredentials) validatePassphrase(formats strfmt.Registry) error {

	if err := validate.Required("passphrase", "body", m.Passphrase); err != nil {
		return err
	}

	return nil
}

func (m *GitV1SSHCredentials) validatePrivateKey(formats strfmt.Registry) error {

	if err := validate.Required("private_key", "body", m.PrivateKey); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this git v1 SSH credentials based on context it is used
func (m *GitV1SSHCredentials) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *GitV1SSHCredentials) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GitV1SSHCredentials) UnmarshalBinary(b []byte) error {
	var res GitV1SSHCredentials
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

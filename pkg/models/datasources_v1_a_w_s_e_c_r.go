// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// DatasourcesV1AWSECR aws/ecr
// Example: {"category":"aws/ecr","credentials":"aws_creds","on_premises":false,"region":"us-east-1","type":"pull"}
//
// swagger:model datasources.v1.AWS.ECR
type DatasourcesV1AWSECR struct {
	DatasourcesV1Common

	DatasourcesV1RateLimiter

	DatasourcesV1Poller

	DatasourcesV1AWSCommon

	// Registry ID
	RegistryID string `json:"RegistryId,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *DatasourcesV1AWSECR) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 DatasourcesV1Common
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.DatasourcesV1Common = aO0

	// AO1
	var aO1 DatasourcesV1RateLimiter
	if err := swag.ReadJSON(raw, &aO1); err != nil {
		return err
	}
	m.DatasourcesV1RateLimiter = aO1

	// AO2
	var aO2 DatasourcesV1Poller
	if err := swag.ReadJSON(raw, &aO2); err != nil {
		return err
	}
	m.DatasourcesV1Poller = aO2

	// AO3
	var aO3 DatasourcesV1AWSCommon
	if err := swag.ReadJSON(raw, &aO3); err != nil {
		return err
	}
	m.DatasourcesV1AWSCommon = aO3

	// AO4
	var dataAO4 struct {
		RegistryID string `json:"RegistryId,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO4); err != nil {
		return err
	}

	m.RegistryID = dataAO4.RegistryID

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m DatasourcesV1AWSECR) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 5)

	aO0, err := swag.WriteJSON(m.DatasourcesV1Common)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	aO1, err := swag.WriteJSON(m.DatasourcesV1RateLimiter)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO1)

	aO2, err := swag.WriteJSON(m.DatasourcesV1Poller)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO2)

	aO3, err := swag.WriteJSON(m.DatasourcesV1AWSCommon)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO3)
	var dataAO4 struct {
		RegistryID string `json:"RegistryId,omitempty"`
	}

	dataAO4.RegistryID = m.RegistryID

	jsonDataAO4, errAO4 := swag.WriteJSON(dataAO4)
	if errAO4 != nil {
		return nil, errAO4
	}
	_parts = append(_parts, jsonDataAO4)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this datasources v1 a w s e c r
func (m *DatasourcesV1AWSECR) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with DatasourcesV1Common
	if err := m.DatasourcesV1Common.Validate(formats); err != nil {
		res = append(res, err)
	}
	// validation for a type composition with DatasourcesV1RateLimiter
	if err := m.DatasourcesV1RateLimiter.Validate(formats); err != nil {
		res = append(res, err)
	}
	// validation for a type composition with DatasourcesV1Poller
	if err := m.DatasourcesV1Poller.Validate(formats); err != nil {
		res = append(res, err)
	}
	// validation for a type composition with DatasourcesV1AWSCommon
	if err := m.DatasourcesV1AWSCommon.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validate this datasources v1 a w s e c r based on the context it is used
func (m *DatasourcesV1AWSECR) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with DatasourcesV1Common
	if err := m.DatasourcesV1Common.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}
	// validation for a type composition with DatasourcesV1RateLimiter
	if err := m.DatasourcesV1RateLimiter.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}
	// validation for a type composition with DatasourcesV1Poller
	if err := m.DatasourcesV1Poller.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}
	// validation for a type composition with DatasourcesV1AWSCommon
	if err := m.DatasourcesV1AWSCommon.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (m *DatasourcesV1AWSECR) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DatasourcesV1AWSECR) UnmarshalBinary(b []byte) error {
	var res DatasourcesV1AWSECR
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

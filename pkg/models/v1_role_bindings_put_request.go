// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// V1RoleBindingsPutRequest v1 role bindings put request
//
// swagger:model v1.RoleBindingsPutRequest
type V1RoleBindingsPutRequest struct {

	// description
	// Required: true
	Description *string `json:"description"`

	// id
	// Required: true
	ID *string `json:"id"`

	// role name
	// Required: true
	RoleName *string `json:"role_name"`

	// subjects
	// Required: true
	Subjects []string `json:"subjects"`
}

// Validate validates this v1 role bindings put request
func (m *V1RoleBindingsPutRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRoleName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSubjects(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1RoleBindingsPutRequest) validateDescription(formats strfmt.Registry) error {

	if err := validate.Required("description", "body", m.Description); err != nil {
		return err
	}

	return nil
}

func (m *V1RoleBindingsPutRequest) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *V1RoleBindingsPutRequest) validateRoleName(formats strfmt.Registry) error {

	if err := validate.Required("role_name", "body", m.RoleName); err != nil {
		return err
	}

	return nil
}

func (m *V1RoleBindingsPutRequest) validateSubjects(formats strfmt.Registry) error {

	if err := validate.Required("subjects", "body", m.Subjects); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this v1 role bindings put request based on context it is used
func (m *V1RoleBindingsPutRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *V1RoleBindingsPutRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1RoleBindingsPutRequest) UnmarshalBinary(b []byte) error {
	var res V1RoleBindingsPutRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

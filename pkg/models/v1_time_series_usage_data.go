// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// V1TimeSeriesUsageData v1 time series usage data
//
// swagger:model v1.TimeSeriesUsageData
type V1TimeSeriesUsageData struct {

	// date
	// Required: true
	Date *string `json:"date"`

	// decision rate
	// Required: true
	DecisionRate *int64 `json:"decision_rate"`

	// node count
	// Required: true
	NodeCount *int64 `json:"node_count"`
}

// Validate validates this v1 time series usage data
func (m *V1TimeSeriesUsageData) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDecisionRate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNodeCount(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1TimeSeriesUsageData) validateDate(formats strfmt.Registry) error {

	if err := validate.Required("date", "body", m.Date); err != nil {
		return err
	}

	return nil
}

func (m *V1TimeSeriesUsageData) validateDecisionRate(formats strfmt.Registry) error {

	if err := validate.Required("decision_rate", "body", m.DecisionRate); err != nil {
		return err
	}

	return nil
}

func (m *V1TimeSeriesUsageData) validateNodeCount(formats strfmt.Registry) error {

	if err := validate.Required("node_count", "body", m.NodeCount); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this v1 time series usage data based on context it is used
func (m *V1TimeSeriesUsageData) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *V1TimeSeriesUsageData) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1TimeSeriesUsageData) UnmarshalBinary(b []byte) error {
	var res V1TimeSeriesUsageData
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

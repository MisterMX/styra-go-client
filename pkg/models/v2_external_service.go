// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// V2ExternalService v2 external service
//
// swagger:model v2.ExternalService
type V2ExternalService struct {

	// cluster
	// Required: true
	Cluster *string `json:"cluster"`

	// dns name
	// Required: true
	DNSName *string `json:"dns_name"`

	// dns zone
	// Required: true
	DNSZone *string `json:"dns_zone"`

	// static ip
	// Required: true
	StaticIP *bool `json:"static_ip"`

	// type
	// Required: true
	Type *string `json:"type"`
}

// Validate validates this v2 external service
func (m *V2ExternalService) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCluster(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDNSName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDNSZone(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStaticIP(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V2ExternalService) validateCluster(formats strfmt.Registry) error {

	if err := validate.Required("cluster", "body", m.Cluster); err != nil {
		return err
	}

	return nil
}

func (m *V2ExternalService) validateDNSName(formats strfmt.Registry) error {

	if err := validate.Required("dns_name", "body", m.DNSName); err != nil {
		return err
	}

	return nil
}

func (m *V2ExternalService) validateDNSZone(formats strfmt.Registry) error {

	if err := validate.Required("dns_zone", "body", m.DNSZone); err != nil {
		return err
	}

	return nil
}

func (m *V2ExternalService) validateStaticIP(formats strfmt.Registry) error {

	if err := validate.Required("static_ip", "body", m.StaticIP); err != nil {
		return err
	}

	return nil
}

func (m *V2ExternalService) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this v2 external service based on context it is used
func (m *V2ExternalService) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *V2ExternalService) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V2ExternalService) UnmarshalBinary(b []byte) error {
	var res V2ExternalService
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// V1EnforcementConfig v1 enforcement config
//
// swagger:model v1.EnforcementConfig
type V1EnforcementConfig struct {

	// true if the policy is enforced
	// Required: true
	// Read Only: true
	Enforced bool `json:"enforced"`

	// enforcement type e.g. opa, test, mask
	// Required: true
	// Read Only: true
	Type string `json:"type"`
}

// Validate validates this v1 enforcement config
func (m *V1EnforcementConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEnforced(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1EnforcementConfig) validateEnforced(formats strfmt.Registry) error {

	if err := validate.Required("enforced", "body", bool(m.Enforced)); err != nil {
		return err
	}

	return nil
}

func (m *V1EnforcementConfig) validateType(formats strfmt.Registry) error {

	if err := validate.RequiredString("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this v1 enforcement config based on the context it is used
func (m *V1EnforcementConfig) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateEnforced(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1EnforcementConfig) contextValidateEnforced(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "enforced", "body", bool(m.Enforced)); err != nil {
		return err
	}

	return nil
}

func (m *V1EnforcementConfig) contextValidateType(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "type", "body", string(m.Type)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1EnforcementConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1EnforcementConfig) UnmarshalBinary(b []byte) error {
	var res V1EnforcementConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// WorkspaceV1WorkspaceParameters workspace v1 workspace parameters
//
// swagger:model workspace.v1.WorkspaceParameters
type WorkspaceV1WorkspaceParameters struct {

	// activity exporter
	ActivityExporter *WorkspaceV1ActivityExporterConfig `json:"activity_exporter,omitempty"`

	// decisions exporter
	DecisionsExporter *WorkspaceV1DecisionExporterConfig `json:"decisions_exporter,omitempty"`

	// github
	Github *WorkspaceV1GithubConfiguration `json:"github,omitempty"`

	// metrics exporter
	MetricsExporter *WorkspaceV1MetricsExporterConfig `json:"metrics_exporter,omitempty"`

	// source control
	SourceControl *GitV1SourceControlConfig `json:"source_control,omitempty"`
}

// Validate validates this workspace v1 workspace parameters
func (m *WorkspaceV1WorkspaceParameters) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateActivityExporter(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDecisionsExporter(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGithub(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMetricsExporter(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSourceControl(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *WorkspaceV1WorkspaceParameters) validateActivityExporter(formats strfmt.Registry) error {
	if swag.IsZero(m.ActivityExporter) { // not required
		return nil
	}

	if m.ActivityExporter != nil {
		if err := m.ActivityExporter.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("activity_exporter")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("activity_exporter")
			}
			return err
		}
	}

	return nil
}

func (m *WorkspaceV1WorkspaceParameters) validateDecisionsExporter(formats strfmt.Registry) error {
	if swag.IsZero(m.DecisionsExporter) { // not required
		return nil
	}

	if m.DecisionsExporter != nil {
		if err := m.DecisionsExporter.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("decisions_exporter")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("decisions_exporter")
			}
			return err
		}
	}

	return nil
}

func (m *WorkspaceV1WorkspaceParameters) validateGithub(formats strfmt.Registry) error {
	if swag.IsZero(m.Github) { // not required
		return nil
	}

	if m.Github != nil {
		if err := m.Github.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("github")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("github")
			}
			return err
		}
	}

	return nil
}

func (m *WorkspaceV1WorkspaceParameters) validateMetricsExporter(formats strfmt.Registry) error {
	if swag.IsZero(m.MetricsExporter) { // not required
		return nil
	}

	if m.MetricsExporter != nil {
		if err := m.MetricsExporter.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("metrics_exporter")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("metrics_exporter")
			}
			return err
		}
	}

	return nil
}

func (m *WorkspaceV1WorkspaceParameters) validateSourceControl(formats strfmt.Registry) error {
	if swag.IsZero(m.SourceControl) { // not required
		return nil
	}

	if m.SourceControl != nil {
		if err := m.SourceControl.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("source_control")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("source_control")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this workspace v1 workspace parameters based on the context it is used
func (m *WorkspaceV1WorkspaceParameters) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateActivityExporter(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDecisionsExporter(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateGithub(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMetricsExporter(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSourceControl(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *WorkspaceV1WorkspaceParameters) contextValidateActivityExporter(ctx context.Context, formats strfmt.Registry) error {

	if m.ActivityExporter != nil {
		if err := m.ActivityExporter.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("activity_exporter")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("activity_exporter")
			}
			return err
		}
	}

	return nil
}

func (m *WorkspaceV1WorkspaceParameters) contextValidateDecisionsExporter(ctx context.Context, formats strfmt.Registry) error {

	if m.DecisionsExporter != nil {
		if err := m.DecisionsExporter.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("decisions_exporter")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("decisions_exporter")
			}
			return err
		}
	}

	return nil
}

func (m *WorkspaceV1WorkspaceParameters) contextValidateGithub(ctx context.Context, formats strfmt.Registry) error {

	if m.Github != nil {
		if err := m.Github.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("github")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("github")
			}
			return err
		}
	}

	return nil
}

func (m *WorkspaceV1WorkspaceParameters) contextValidateMetricsExporter(ctx context.Context, formats strfmt.Registry) error {

	if m.MetricsExporter != nil {
		if err := m.MetricsExporter.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("metrics_exporter")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("metrics_exporter")
			}
			return err
		}
	}

	return nil
}

func (m *WorkspaceV1WorkspaceParameters) contextValidateSourceControl(ctx context.Context, formats strfmt.Registry) error {

	if m.SourceControl != nil {
		if err := m.SourceControl.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("source_control")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("source_control")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *WorkspaceV1WorkspaceParameters) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *WorkspaceV1WorkspaceParameters) UnmarshalBinary(b []byte) error {
	var res WorkspaceV1WorkspaceParameters
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// V1EntryReplayResult v1 entry replay result
//
// swagger:model v1.EntryReplayResult
type V1EntryReplayResult struct {

	// configured bundles
	Bundles map[string]LogsBundleInfoV1 `json:"bundles,omitempty"`

	// unique decision ID
	DecisionID string `json:"decision_id,omitempty"`

	// erased fields
	Erased []string `json:"erased"`

	// evaluation error
	Error string `json:"error,omitempty"`

	// rego inputs
	Input V1LogEntryInput `json:"input,omitempty"`

	// OPA labels
	Labels map[string]string `json:"labels,omitempty"`

	// decision metrics
	Metrics interface{} `json:"metrics,omitempty"`

	// new decision result
	NewResult V1EntryReplayResultNewResult `json:"new_result,omitempty"`

	// evaluated path
	Path string `json:"path,omitempty"`

	// ad-hoc query
	Query string `json:"query,omitempty"`

	// requested by IP:port
	RequestedBy string `json:"requested_by,omitempty"`

	// evaluation result
	Result V1LogEntryResult `json:"result,omitempty"`

	// bundle revision
	Revision string `json:"revision,omitempty"`

	// OPA-side decision timestamp
	// Format: date-time
	Timestamp strfmt.DateTime `json:"timestamp,omitempty"`
}

// Validate validates this v1 entry replay result
func (m *V1EntryReplayResult) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBundles(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1EntryReplayResult) validateBundles(formats strfmt.Registry) error {
	if swag.IsZero(m.Bundles) { // not required
		return nil
	}

	for k := range m.Bundles {

		if err := validate.Required("bundles"+"."+k, "body", m.Bundles[k]); err != nil {
			return err
		}
		if val, ok := m.Bundles[k]; ok {
			if err := val.Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *V1EntryReplayResult) validateTimestamp(formats strfmt.Registry) error {
	if swag.IsZero(m.Timestamp) { // not required
		return nil
	}

	if err := validate.FormatOf("timestamp", "body", "date-time", m.Timestamp.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this v1 entry replay result based on the context it is used
func (m *V1EntryReplayResult) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateBundles(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1EntryReplayResult) contextValidateBundles(ctx context.Context, formats strfmt.Registry) error {

	for k := range m.Bundles {

		if val, ok := m.Bundles[k]; ok {
			if err := val.ContextValidate(ctx, formats); err != nil {
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1EntryReplayResult) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1EntryReplayResult) UnmarshalBinary(b []byte) error {
	var res V1EntryReplayResult
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

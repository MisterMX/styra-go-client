// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DatasourcesGitCommon datasources git common
//
// swagger:model datasources.Git.Common
type DatasourcesGitCommon struct {
	DatasourcesCommon

	DatasourcesPoller

	DatasourcesRateLimiter

	// Secret ID with credentials
	Credentials string `json:"credentials,omitempty"`

	// reference
	Reference *string `json:"reference,omitempty"`

	// ssh credentials
	SSHCredentials *DatasourcesGitCommonAO3SSHCredentials `json:"ssh_credentials,omitempty"`

	// timeout
	Timeout *string `json:"timeout,omitempty"`

	// `The property is not used`
	TLSCaCertificate string `json:"tls_ca_certificate,omitempty"`

	// `The property is not used`
	TLSCertificate string `json:"tls_certificate,omitempty"`

	// `The property is not used`
	TLSKey string `json:"tls_key,omitempty"`

	// `The property is not used`
	TLSServerName string `json:"tls_server_name,omitempty"`

	// `The property is not used`
	TLSVerifyServer bool `json:"tls_verify_server,omitempty"`

	// Git URL
	// Required: true
	URL *string `json:"url"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *DatasourcesGitCommon) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 DatasourcesCommon
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.DatasourcesCommon = aO0

	// AO1
	var aO1 DatasourcesPoller
	if err := swag.ReadJSON(raw, &aO1); err != nil {
		return err
	}
	m.DatasourcesPoller = aO1

	// AO2
	var aO2 DatasourcesRateLimiter
	if err := swag.ReadJSON(raw, &aO2); err != nil {
		return err
	}
	m.DatasourcesRateLimiter = aO2

	// AO3
	var dataAO3 struct {
		Credentials string `json:"credentials,omitempty"`

		Reference *string `json:"reference,omitempty"`

		SSHCredentials *DatasourcesGitCommonAO3SSHCredentials `json:"ssh_credentials,omitempty"`

		Timeout *string `json:"timeout,omitempty"`

		TLSCaCertificate string `json:"tls_ca_certificate,omitempty"`

		TLSCertificate string `json:"tls_certificate,omitempty"`

		TLSKey string `json:"tls_key,omitempty"`

		TLSServerName string `json:"tls_server_name,omitempty"`

		TLSVerifyServer bool `json:"tls_verify_server,omitempty"`

		URL *string `json:"url"`
	}
	if err := swag.ReadJSON(raw, &dataAO3); err != nil {
		return err
	}

	m.Credentials = dataAO3.Credentials

	m.Reference = dataAO3.Reference

	m.SSHCredentials = dataAO3.SSHCredentials

	m.Timeout = dataAO3.Timeout

	m.TLSCaCertificate = dataAO3.TLSCaCertificate

	m.TLSCertificate = dataAO3.TLSCertificate

	m.TLSKey = dataAO3.TLSKey

	m.TLSServerName = dataAO3.TLSServerName

	m.TLSVerifyServer = dataAO3.TLSVerifyServer

	m.URL = dataAO3.URL

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m DatasourcesGitCommon) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 4)

	aO0, err := swag.WriteJSON(m.DatasourcesCommon)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	aO1, err := swag.WriteJSON(m.DatasourcesPoller)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO1)

	aO2, err := swag.WriteJSON(m.DatasourcesRateLimiter)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO2)
	var dataAO3 struct {
		Credentials string `json:"credentials,omitempty"`

		Reference *string `json:"reference,omitempty"`

		SSHCredentials *DatasourcesGitCommonAO3SSHCredentials `json:"ssh_credentials,omitempty"`

		Timeout *string `json:"timeout,omitempty"`

		TLSCaCertificate string `json:"tls_ca_certificate,omitempty"`

		TLSCertificate string `json:"tls_certificate,omitempty"`

		TLSKey string `json:"tls_key,omitempty"`

		TLSServerName string `json:"tls_server_name,omitempty"`

		TLSVerifyServer bool `json:"tls_verify_server,omitempty"`

		URL *string `json:"url"`
	}

	dataAO3.Credentials = m.Credentials

	dataAO3.Reference = m.Reference

	dataAO3.SSHCredentials = m.SSHCredentials

	dataAO3.Timeout = m.Timeout

	dataAO3.TLSCaCertificate = m.TLSCaCertificate

	dataAO3.TLSCertificate = m.TLSCertificate

	dataAO3.TLSKey = m.TLSKey

	dataAO3.TLSServerName = m.TLSServerName

	dataAO3.TLSVerifyServer = m.TLSVerifyServer

	dataAO3.URL = m.URL

	jsonDataAO3, errAO3 := swag.WriteJSON(dataAO3)
	if errAO3 != nil {
		return nil, errAO3
	}
	_parts = append(_parts, jsonDataAO3)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this datasources git common
func (m *DatasourcesGitCommon) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with DatasourcesCommon
	if err := m.DatasourcesCommon.Validate(formats); err != nil {
		res = append(res, err)
	}
	// validation for a type composition with DatasourcesPoller
	if err := m.DatasourcesPoller.Validate(formats); err != nil {
		res = append(res, err)
	}
	// validation for a type composition with DatasourcesRateLimiter
	if err := m.DatasourcesRateLimiter.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSSHCredentials(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateURL(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DatasourcesGitCommon) validateSSHCredentials(formats strfmt.Registry) error {

	if swag.IsZero(m.SSHCredentials) { // not required
		return nil
	}

	if m.SSHCredentials != nil {
		if err := m.SSHCredentials.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ssh_credentials")
			}
			return err
		}
	}

	return nil
}

func (m *DatasourcesGitCommon) validateURL(formats strfmt.Registry) error {

	if err := validate.Required("url", "body", m.URL); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this datasources git common based on the context it is used
func (m *DatasourcesGitCommon) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with DatasourcesCommon
	if err := m.DatasourcesCommon.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}
	// validation for a type composition with DatasourcesPoller
	if err := m.DatasourcesPoller.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}
	// validation for a type composition with DatasourcesRateLimiter
	if err := m.DatasourcesRateLimiter.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSSHCredentials(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DatasourcesGitCommon) contextValidateSSHCredentials(ctx context.Context, formats strfmt.Registry) error {

	if m.SSHCredentials != nil {
		if err := m.SSHCredentials.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ssh_credentials")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DatasourcesGitCommon) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DatasourcesGitCommon) UnmarshalBinary(b []byte) error {
	var res DatasourcesGitCommon
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// DatasourcesGitCommonAO3SSHCredentials datasources git common a o3 SSH credentials
//
// swagger:model DatasourcesGitCommonAO3SSHCredentials
type DatasourcesGitCommonAO3SSHCredentials struct {

	// Secret ID with passphrase
	Passphrase string `json:"passphrase,omitempty"`

	// Secret ID with private key
	// Required: true
	PrivateKey *string `json:"private_key"`
}

// Validate validates this datasources git common a o3 SSH credentials
func (m *DatasourcesGitCommonAO3SSHCredentials) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePrivateKey(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DatasourcesGitCommonAO3SSHCredentials) validatePrivateKey(formats strfmt.Registry) error {

	if err := validate.Required("ssh_credentials"+"."+"private_key", "body", m.PrivateKey); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this datasources git common a o3 SSH credentials based on context it is used
func (m *DatasourcesGitCommonAO3SSHCredentials) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *DatasourcesGitCommonAO3SSHCredentials) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DatasourcesGitCommonAO3SSHCredentials) UnmarshalBinary(b []byte) error {
	var res DatasourcesGitCommonAO3SSHCredentials
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

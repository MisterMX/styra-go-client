// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// DatasourcesGitRego git/rego
// Example: {"category":"git/rego","on_premises":false,"path":"foo/bar","reference\"":"refs/heads/main","ssh_credentials":{"private_key":"git_ssh_key"},"type":"pull","url":"https://git.example.com"}
//
// swagger:model datasources.Git.Rego
type DatasourcesGitRego struct {
	DatasourcesGitCommon

	// Must be `git/rego`
	Category interface{} `json:"category,omitempty"`

	// path
	Path string `json:"path,omitempty"`

	// Must be `pull`
	Type interface{} `json:"type,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *DatasourcesGitRego) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 DatasourcesGitCommon
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.DatasourcesGitCommon = aO0

	// AO1
	var dataAO1 struct {
		Category interface{} `json:"category,omitempty"`

		Path string `json:"path,omitempty"`

		Type interface{} `json:"type,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.Category = dataAO1.Category

	m.Path = dataAO1.Path

	m.Type = dataAO1.Type

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m DatasourcesGitRego) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.DatasourcesGitCommon)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		Category interface{} `json:"category,omitempty"`

		Path string `json:"path,omitempty"`

		Type interface{} `json:"type,omitempty"`
	}

	dataAO1.Category = m.Category

	dataAO1.Path = m.Path

	dataAO1.Type = m.Type

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this datasources git rego
func (m *DatasourcesGitRego) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with DatasourcesGitCommon
	if err := m.DatasourcesGitCommon.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validate this datasources git rego based on the context it is used
func (m *DatasourcesGitRego) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with DatasourcesGitCommon
	if err := m.DatasourcesGitCommon.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (m *DatasourcesGitRego) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DatasourcesGitRego) UnmarshalBinary(b []byte) error {
	var res DatasourcesGitRego
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// LogreplayV1ReplayResult logreplay v1 replay result
//
// swagger:model logreplay.v1.ReplayResult
type LogreplayV1ReplayResult struct {

	// analyzed decision batches IDs to be used for skip_batches in subsequent requests
	// Required: true
	AnalyzedBatches []string `json:"analyzed_batches"`

	// replay duration
	// Required: true
	Duration *int64 `json:"duration"`

	// representative change samples
	// Required: true
	Samples []*LogreplayV1EntryReplayResult `json:"samples"`

	// replay start time
	// Required: true
	// Format: date-time
	Started *strfmt.DateTime `json:"started"`

	// replay statistics
	// Required: true
	Stats *LogreplayV1ReplayStats `json:"stats"`
}

// Validate validates this logreplay v1 replay result
func (m *LogreplayV1ReplayResult) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAnalyzedBatches(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDuration(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSamples(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStarted(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStats(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LogreplayV1ReplayResult) validateAnalyzedBatches(formats strfmt.Registry) error {

	if err := validate.Required("analyzed_batches", "body", m.AnalyzedBatches); err != nil {
		return err
	}

	return nil
}

func (m *LogreplayV1ReplayResult) validateDuration(formats strfmt.Registry) error {

	if err := validate.Required("duration", "body", m.Duration); err != nil {
		return err
	}

	return nil
}

func (m *LogreplayV1ReplayResult) validateSamples(formats strfmt.Registry) error {

	if err := validate.Required("samples", "body", m.Samples); err != nil {
		return err
	}

	for i := 0; i < len(m.Samples); i++ {
		if swag.IsZero(m.Samples[i]) { // not required
			continue
		}

		if m.Samples[i] != nil {
			if err := m.Samples[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("samples" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("samples" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *LogreplayV1ReplayResult) validateStarted(formats strfmt.Registry) error {

	if err := validate.Required("started", "body", m.Started); err != nil {
		return err
	}

	if err := validate.FormatOf("started", "body", "date-time", m.Started.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *LogreplayV1ReplayResult) validateStats(formats strfmt.Registry) error {

	if err := validate.Required("stats", "body", m.Stats); err != nil {
		return err
	}

	if m.Stats != nil {
		if err := m.Stats.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("stats")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("stats")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this logreplay v1 replay result based on the context it is used
func (m *LogreplayV1ReplayResult) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateSamples(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStats(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LogreplayV1ReplayResult) contextValidateSamples(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Samples); i++ {

		if m.Samples[i] != nil {
			if err := m.Samples[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("samples" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("samples" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *LogreplayV1ReplayResult) contextValidateStats(ctx context.Context, formats strfmt.Registry) error {

	if m.Stats != nil {
		if err := m.Stats.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("stats")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("stats")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *LogreplayV1ReplayResult) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *LogreplayV1ReplayResult) UnmarshalBinary(b []byte) error {
	var res LogreplayV1ReplayResult
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// V1Token v1 token
//
// swagger:model v1.Token
type V1Token struct {

	// allow path patterns
	// Required: true
	AllowPathPatterns []string `json:"allow_path_patterns"`

	// description
	// Required: true
	Description *string `json:"description"`

	// expires
	// Required: true
	// Format: date-time
	Expires *strfmt.DateTime `json:"expires"`

	// id
	// Required: true
	ID *string `json:"id"`

	// metadata
	// Required: true
	Metadata *V1ObjectMeta `json:"metadata"`

	// token
	Token string `json:"token,omitempty"`

	// ttl
	// Required: true
	TTL *string `json:"ttl"`

	// uses
	// Required: true
	Uses *int64 `json:"uses"`
}

// Validate validates this v1 token
func (m *V1Token) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAllowPathPatterns(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExpires(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMetadata(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTTL(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUses(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1Token) validateAllowPathPatterns(formats strfmt.Registry) error {

	if err := validate.Required("allow_path_patterns", "body", m.AllowPathPatterns); err != nil {
		return err
	}

	return nil
}

func (m *V1Token) validateDescription(formats strfmt.Registry) error {

	if err := validate.Required("description", "body", m.Description); err != nil {
		return err
	}

	return nil
}

func (m *V1Token) validateExpires(formats strfmt.Registry) error {

	if err := validate.Required("expires", "body", m.Expires); err != nil {
		return err
	}

	if err := validate.FormatOf("expires", "body", "date-time", m.Expires.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *V1Token) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *V1Token) validateMetadata(formats strfmt.Registry) error {

	if err := validate.Required("metadata", "body", m.Metadata); err != nil {
		return err
	}

	if m.Metadata != nil {
		if err := m.Metadata.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("metadata")
			}
			return err
		}
	}

	return nil
}

func (m *V1Token) validateTTL(formats strfmt.Registry) error {

	if err := validate.Required("ttl", "body", m.TTL); err != nil {
		return err
	}

	return nil
}

func (m *V1Token) validateUses(formats strfmt.Registry) error {

	if err := validate.Required("uses", "body", m.Uses); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this v1 token based on the context it is used
func (m *V1Token) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateMetadata(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1Token) contextValidateMetadata(ctx context.Context, formats strfmt.Registry) error {

	if m.Metadata != nil {
		if err := m.Metadata.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("metadata")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1Token) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1Token) UnmarshalBinary(b []byte) error {
	var res V1Token
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// V1DeploymentCommand v1 deployment command
//
// swagger:model v1.DeploymentCommand
type V1DeploymentCommand struct {

	// command text
	// Required: true
	// Read Only: true
	Action string `json:"action"`

	// command title
	// Required: true
	// Read Only: true
	Title string `json:"title"`
}

// Validate validates this v1 deployment command
func (m *V1DeploymentCommand) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAction(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTitle(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1DeploymentCommand) validateAction(formats strfmt.Registry) error {

	if err := validate.RequiredString("action", "body", m.Action); err != nil {
		return err
	}

	return nil
}

func (m *V1DeploymentCommand) validateTitle(formats strfmt.Registry) error {

	if err := validate.RequiredString("title", "body", m.Title); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this v1 deployment command based on the context it is used
func (m *V1DeploymentCommand) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAction(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTitle(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1DeploymentCommand) contextValidateAction(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "action", "body", string(m.Action)); err != nil {
		return err
	}

	return nil
}

func (m *V1DeploymentCommand) contextValidateTitle(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "title", "body", string(m.Title)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1DeploymentCommand) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1DeploymentCommand) UnmarshalBinary(b []byte) error {
	var res V1DeploymentCommand
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// DatasourcesV1KubernetesResources kubernetes/resources
// Example: {"category":"kubernetes/resources","masks":{"argoproj.io/workflows":["*"],"pods":["spec.afinity","spec/livenessProbe","status","metadata.annotations.'kubectl.kubernetes.io/last-applied-configuration'"]},"namespaces":{"":false,"*":false,"nsName":true},"on_premises":true,"rate_limit":3,"selectors":{"ingress":"metadata.namespace==default","pods":"status.phase!=Running,spec.restartPolicy=Always"},"type":"pull"}
//
// swagger:model datasources.v1.Kubernetes.Resources
type DatasourcesV1KubernetesResources struct {
	DatasourcesV1Common

	DatasourcesV1RateLimiter

	DatasourcesV1Poller

	// strip out resource properties given their relative path
	Masks map[string][]string `json:"masks,omitempty"`

	// allows to include/exclude namespaces
	Namespaces map[string]bool `json:"namespaces,omitempty"`

	// field selectors per resource [group]
	Selectors map[string]string `json:"selectors,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *DatasourcesV1KubernetesResources) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 DatasourcesV1Common
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.DatasourcesV1Common = aO0

	// AO1
	var aO1 DatasourcesV1RateLimiter
	if err := swag.ReadJSON(raw, &aO1); err != nil {
		return err
	}
	m.DatasourcesV1RateLimiter = aO1

	// AO2
	var aO2 DatasourcesV1Poller
	if err := swag.ReadJSON(raw, &aO2); err != nil {
		return err
	}
	m.DatasourcesV1Poller = aO2

	// AO3
	var dataAO3 struct {
		Masks map[string][]string `json:"masks,omitempty"`

		Namespaces map[string]bool `json:"namespaces,omitempty"`

		Selectors map[string]string `json:"selectors,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO3); err != nil {
		return err
	}

	m.Masks = dataAO3.Masks

	m.Namespaces = dataAO3.Namespaces

	m.Selectors = dataAO3.Selectors

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m DatasourcesV1KubernetesResources) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 4)

	aO0, err := swag.WriteJSON(m.DatasourcesV1Common)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	aO1, err := swag.WriteJSON(m.DatasourcesV1RateLimiter)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO1)

	aO2, err := swag.WriteJSON(m.DatasourcesV1Poller)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO2)
	var dataAO3 struct {
		Masks map[string][]string `json:"masks,omitempty"`

		Namespaces map[string]bool `json:"namespaces,omitempty"`

		Selectors map[string]string `json:"selectors,omitempty"`
	}

	dataAO3.Masks = m.Masks

	dataAO3.Namespaces = m.Namespaces

	dataAO3.Selectors = m.Selectors

	jsonDataAO3, errAO3 := swag.WriteJSON(dataAO3)
	if errAO3 != nil {
		return nil, errAO3
	}
	_parts = append(_parts, jsonDataAO3)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this datasources v1 kubernetes resources
func (m *DatasourcesV1KubernetesResources) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with DatasourcesV1Common
	if err := m.DatasourcesV1Common.Validate(formats); err != nil {
		res = append(res, err)
	}
	// validation for a type composition with DatasourcesV1RateLimiter
	if err := m.DatasourcesV1RateLimiter.Validate(formats); err != nil {
		res = append(res, err)
	}
	// validation for a type composition with DatasourcesV1Poller
	if err := m.DatasourcesV1Poller.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validate this datasources v1 kubernetes resources based on the context it is used
func (m *DatasourcesV1KubernetesResources) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with DatasourcesV1Common
	if err := m.DatasourcesV1Common.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}
	// validation for a type composition with DatasourcesV1RateLimiter
	if err := m.DatasourcesV1RateLimiter.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}
	// validation for a type composition with DatasourcesV1Poller
	if err := m.DatasourcesV1Poller.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (m *DatasourcesV1KubernetesResources) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DatasourcesV1KubernetesResources) UnmarshalBinary(b []byte) error {
	var res DatasourcesV1KubernetesResources
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

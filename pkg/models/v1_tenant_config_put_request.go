// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// V1TenantConfigPutRequest v1 tenant config put request
//
// swagger:model v1.TenantConfigPutRequest
type V1TenantConfigPutRequest struct {

	// claims
	// Required: true
	Claims interface{} `json:"claims"`

	// default identity provider
	DefaultIdentityProvider string `json:"default_identity_provider,omitempty"`

	// external services
	// Required: true
	ExternalServices map[string]V2ExternalService `json:"external_services"`

	// features
	// Required: true
	Features interface{} `json:"features"`

	// id
	// Required: true
	ID *string `json:"id"`

	// name
	// Required: true
	Name *string `json:"name"`

	// org name
	// Required: true
	OrgName *string `json:"org_name"`

	// removed
	// Required: true
	Removed *bool `json:"removed"`

	// root users
	// Required: true
	RootUsers map[string]V2RootUser `json:"root_users"`

	// signup email
	// Required: true
	SignupEmail *string `json:"signup_email"`

	// tackle info
	TackleInfo *V2TackleInfo `json:"tackle_info,omitempty"`

	// trial start time
	// Required: true
	// Format: date-time
	TrialStartTime *strfmt.DateTime `json:"trial_start_time"`

	// trial started
	// Required: true
	TrialStarted *bool `json:"trial_started"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this v1 tenant config put request
func (m *V1TenantConfigPutRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateClaims(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExternalServices(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFeatures(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrgName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRemoved(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRootUsers(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSignupEmail(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTackleInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTrialStartTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTrialStarted(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1TenantConfigPutRequest) validateClaims(formats strfmt.Registry) error {

	if m.Claims == nil {
		return errors.Required("claims", "body", nil)
	}

	return nil
}

func (m *V1TenantConfigPutRequest) validateExternalServices(formats strfmt.Registry) error {

	if err := validate.Required("external_services", "body", m.ExternalServices); err != nil {
		return err
	}

	for k := range m.ExternalServices {

		if err := validate.Required("external_services"+"."+k, "body", m.ExternalServices[k]); err != nil {
			return err
		}
		if val, ok := m.ExternalServices[k]; ok {
			if err := val.Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *V1TenantConfigPutRequest) validateFeatures(formats strfmt.Registry) error {

	if m.Features == nil {
		return errors.Required("features", "body", nil)
	}

	return nil
}

func (m *V1TenantConfigPutRequest) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *V1TenantConfigPutRequest) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *V1TenantConfigPutRequest) validateOrgName(formats strfmt.Registry) error {

	if err := validate.Required("org_name", "body", m.OrgName); err != nil {
		return err
	}

	return nil
}

func (m *V1TenantConfigPutRequest) validateRemoved(formats strfmt.Registry) error {

	if err := validate.Required("removed", "body", m.Removed); err != nil {
		return err
	}

	return nil
}

func (m *V1TenantConfigPutRequest) validateRootUsers(formats strfmt.Registry) error {

	if err := validate.Required("root_users", "body", m.RootUsers); err != nil {
		return err
	}

	for k := range m.RootUsers {

		if err := validate.Required("root_users"+"."+k, "body", m.RootUsers[k]); err != nil {
			return err
		}
		if val, ok := m.RootUsers[k]; ok {
			if err := val.Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *V1TenantConfigPutRequest) validateSignupEmail(formats strfmt.Registry) error {

	if err := validate.Required("signup_email", "body", m.SignupEmail); err != nil {
		return err
	}

	return nil
}

func (m *V1TenantConfigPutRequest) validateTackleInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.TackleInfo) { // not required
		return nil
	}

	if m.TackleInfo != nil {
		if err := m.TackleInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("tackle_info")
			}
			return err
		}
	}

	return nil
}

func (m *V1TenantConfigPutRequest) validateTrialStartTime(formats strfmt.Registry) error {

	if err := validate.Required("trial_start_time", "body", m.TrialStartTime); err != nil {
		return err
	}

	if err := validate.FormatOf("trial_start_time", "body", "date-time", m.TrialStartTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *V1TenantConfigPutRequest) validateTrialStarted(formats strfmt.Registry) error {

	if err := validate.Required("trial_started", "body", m.TrialStarted); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this v1 tenant config put request based on the context it is used
func (m *V1TenantConfigPutRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateExternalServices(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRootUsers(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTackleInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1TenantConfigPutRequest) contextValidateExternalServices(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.Required("external_services", "body", m.ExternalServices); err != nil {
		return err
	}

	for k := range m.ExternalServices {

		if val, ok := m.ExternalServices[k]; ok {
			if err := val.ContextValidate(ctx, formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *V1TenantConfigPutRequest) contextValidateRootUsers(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.Required("root_users", "body", m.RootUsers); err != nil {
		return err
	}

	for k := range m.RootUsers {

		if val, ok := m.RootUsers[k]; ok {
			if err := val.ContextValidate(ctx, formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *V1TenantConfigPutRequest) contextValidateTackleInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.TackleInfo != nil {
		if err := m.TackleInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("tackle_info")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1TenantConfigPutRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1TenantConfigPutRequest) UnmarshalBinary(b []byte) error {
	var res V1TenantConfigPutRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

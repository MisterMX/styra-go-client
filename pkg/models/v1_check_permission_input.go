// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// V1CheckPermissionInput v1 check permission input
//
// swagger:model v1.CheckPermissionInput
type V1CheckPermissionInput struct {

	// action
	// Required: true
	Action *string `json:"action"`

	// body
	// Required: true
	Body interface{} `json:"body"`

	// check option
	// Required: true
	CheckOption *string `json:"check_option"`

	// operation
	// Required: true
	Operation *string `json:"operation"`

	// path
	// Required: true
	Path *string `json:"path"`
}

// Validate validates this v1 check permission input
func (m *V1CheckPermissionInput) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAction(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBody(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCheckOption(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOperation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePath(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1CheckPermissionInput) validateAction(formats strfmt.Registry) error {

	if err := validate.Required("action", "body", m.Action); err != nil {
		return err
	}

	return nil
}

func (m *V1CheckPermissionInput) validateBody(formats strfmt.Registry) error {

	if m.Body == nil {
		return errors.Required("body", "body", nil)
	}

	return nil
}

func (m *V1CheckPermissionInput) validateCheckOption(formats strfmt.Registry) error {

	if err := validate.Required("check_option", "body", m.CheckOption); err != nil {
		return err
	}

	return nil
}

func (m *V1CheckPermissionInput) validateOperation(formats strfmt.Registry) error {

	if err := validate.Required("operation", "body", m.Operation); err != nil {
		return err
	}

	return nil
}

func (m *V1CheckPermissionInput) validatePath(formats strfmt.Registry) error {

	if err := validate.Required("path", "body", m.Path); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this v1 check permission input based on context it is used
func (m *V1CheckPermissionInput) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *V1CheckPermissionInput) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1CheckPermissionInput) UnmarshalBinary(b []byte) error {
	var res V1CheckPermissionInput
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

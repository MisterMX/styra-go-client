// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// V1Decision v1 decision
//
// swagger:model v1.Decision
type V1Decision struct {

	// agent id
	AgentID string `json:"agent_id,omitempty"`

	// allowed
	Allowed *V1AllowedValue `json:"allowed,omitempty"`

	// configured bundles
	Bundles map[string]LogsBundleInfoV1 `json:"bundles,omitempty"`

	// columns
	// Required: true
	Columns []*V1ColumnValue `json:"columns"`

	// cursor
	// Required: true
	Cursor *string `json:"cursor"`

	// unique decision ID
	// Required: true
	DecisionID *string `json:"decision_id"`

	// erased fields
	Erased []string `json:"erased"`

	// error information for failed decisions
	Error V1LogEntryError `json:"error,omitempty"`

	// rego inputs
	Input V1LogEntryInput `json:"input,omitempty"`

	// OPA labels
	Labels map[string]string `json:"labels,omitempty"`

	// decision metrics
	Metrics interface{} `json:"metrics,omitempty"`

	// evaluated path
	Path string `json:"path,omitempty"`

	// policy type
	PolicyType string `json:"policy_type,omitempty"`

	// ad-hoc query
	Query string `json:"query,omitempty"`

	// reason
	Reason *V1ReasonValue `json:"reason,omitempty"`

	// received
	// Format: date-time
	Received strfmt.DateTime `json:"received,omitempty"`

	// requested by IP:port
	RequestedBy string `json:"requested_by,omitempty"`

	// evaluation result
	Result V1LogEntryResult `json:"result,omitempty"`

	// bundle revision
	Revision string `json:"revision,omitempty"`

	// stacks
	Stacks []string `json:"stacks"`

	// system id
	SystemID string `json:"system_id,omitempty"`

	// system type
	SystemType string `json:"system_type,omitempty"`

	// OPA-side decision timestamp
	// Format: date-time
	Timestamp strfmt.DateTime `json:"timestamp,omitempty"`
}

// Validate validates this v1 decision
func (m *V1Decision) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAllowed(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBundles(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateColumns(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCursor(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDecisionID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReason(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReceived(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1Decision) validateAllowed(formats strfmt.Registry) error {
	if swag.IsZero(m.Allowed) { // not required
		return nil
	}

	if m.Allowed != nil {
		if err := m.Allowed.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("allowed")
			}
			return err
		}
	}

	return nil
}

func (m *V1Decision) validateBundles(formats strfmt.Registry) error {
	if swag.IsZero(m.Bundles) { // not required
		return nil
	}

	for k := range m.Bundles {

		if err := validate.Required("bundles"+"."+k, "body", m.Bundles[k]); err != nil {
			return err
		}
		if val, ok := m.Bundles[k]; ok {
			if err := val.Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *V1Decision) validateColumns(formats strfmt.Registry) error {

	if err := validate.Required("columns", "body", m.Columns); err != nil {
		return err
	}

	for i := 0; i < len(m.Columns); i++ {
		if swag.IsZero(m.Columns[i]) { // not required
			continue
		}

		if m.Columns[i] != nil {
			if err := m.Columns[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("columns" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V1Decision) validateCursor(formats strfmt.Registry) error {

	if err := validate.Required("cursor", "body", m.Cursor); err != nil {
		return err
	}

	return nil
}

func (m *V1Decision) validateDecisionID(formats strfmt.Registry) error {

	if err := validate.Required("decision_id", "body", m.DecisionID); err != nil {
		return err
	}

	return nil
}

func (m *V1Decision) validateReason(formats strfmt.Registry) error {
	if swag.IsZero(m.Reason) { // not required
		return nil
	}

	if m.Reason != nil {
		if err := m.Reason.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("reason")
			}
			return err
		}
	}

	return nil
}

func (m *V1Decision) validateReceived(formats strfmt.Registry) error {
	if swag.IsZero(m.Received) { // not required
		return nil
	}

	if err := validate.FormatOf("received", "body", "date-time", m.Received.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *V1Decision) validateTimestamp(formats strfmt.Registry) error {
	if swag.IsZero(m.Timestamp) { // not required
		return nil
	}

	if err := validate.FormatOf("timestamp", "body", "date-time", m.Timestamp.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this v1 decision based on the context it is used
func (m *V1Decision) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAllowed(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateBundles(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateColumns(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateReason(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1Decision) contextValidateAllowed(ctx context.Context, formats strfmt.Registry) error {

	if m.Allowed != nil {
		if err := m.Allowed.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("allowed")
			}
			return err
		}
	}

	return nil
}

func (m *V1Decision) contextValidateBundles(ctx context.Context, formats strfmt.Registry) error {

	for k := range m.Bundles {

		if val, ok := m.Bundles[k]; ok {
			if err := val.ContextValidate(ctx, formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *V1Decision) contextValidateColumns(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Columns); i++ {

		if m.Columns[i] != nil {
			if err := m.Columns[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("columns" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V1Decision) contextValidateReason(ctx context.Context, formats strfmt.Registry) error {

	if m.Reason != nil {
		if err := m.Reason.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("reason")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1Decision) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1Decision) UnmarshalBinary(b []byte) error {
	var res V1Decision
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

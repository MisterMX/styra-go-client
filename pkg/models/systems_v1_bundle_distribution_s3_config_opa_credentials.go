// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// SystemsV1BundleDistributionS3ConfigOpaCredentials systems v1 bundle distribution s3 config opa credentials
//
// swagger:model systems.v1.BundleDistributionS3Config.opa_credentials
type SystemsV1BundleDistributionS3ConfigOpaCredentials struct {

	// environment credentials
	EnvironmentCredentials SystemsV1BundleDistributionS3ConfigOpaCredentialsEnvironmentCredentials `json:"environment_credentials,omitempty"`

	// metadata credentials
	MetadataCredentials *SystemsV1BundleDistributionS3ConfigOpaCredentialsMetadataCredentials `json:"metadata_credentials,omitempty"`

	// web identity credentials
	WebIdentityCredentials *SystemsV1BundleDistributionS3ConfigOpaCredentialsWebIdentityCredentials `json:"web_identity_credentials,omitempty"`
}

// Validate validates this systems v1 bundle distribution s3 config opa credentials
func (m *SystemsV1BundleDistributionS3ConfigOpaCredentials) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMetadataCredentials(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWebIdentityCredentials(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SystemsV1BundleDistributionS3ConfigOpaCredentials) validateMetadataCredentials(formats strfmt.Registry) error {
	if swag.IsZero(m.MetadataCredentials) { // not required
		return nil
	}

	if m.MetadataCredentials != nil {
		if err := m.MetadataCredentials.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("metadata_credentials")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("metadata_credentials")
			}
			return err
		}
	}

	return nil
}

func (m *SystemsV1BundleDistributionS3ConfigOpaCredentials) validateWebIdentityCredentials(formats strfmt.Registry) error {
	if swag.IsZero(m.WebIdentityCredentials) { // not required
		return nil
	}

	if m.WebIdentityCredentials != nil {
		if err := m.WebIdentityCredentials.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("web_identity_credentials")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("web_identity_credentials")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this systems v1 bundle distribution s3 config opa credentials based on the context it is used
func (m *SystemsV1BundleDistributionS3ConfigOpaCredentials) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateMetadataCredentials(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateWebIdentityCredentials(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SystemsV1BundleDistributionS3ConfigOpaCredentials) contextValidateMetadataCredentials(ctx context.Context, formats strfmt.Registry) error {

	if m.MetadataCredentials != nil {
		if err := m.MetadataCredentials.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("metadata_credentials")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("metadata_credentials")
			}
			return err
		}
	}

	return nil
}

func (m *SystemsV1BundleDistributionS3ConfigOpaCredentials) contextValidateWebIdentityCredentials(ctx context.Context, formats strfmt.Registry) error {

	if m.WebIdentityCredentials != nil {
		if err := m.WebIdentityCredentials.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("web_identity_credentials")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("web_identity_credentials")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SystemsV1BundleDistributionS3ConfigOpaCredentials) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SystemsV1BundleDistributionS3ConfigOpaCredentials) UnmarshalBinary(b []byte) error {
	var res SystemsV1BundleDistributionS3ConfigOpaCredentials
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// DatasourcesKubernetesResources kubernetes/resources
// Example: {"category":"kubernetes/resources","masks":{"argoproj.io/workflows":["*"],"pods":["spec.afinity","spec/livenessProbe","status","metadata.annotations.'kubectl.kubernetes.io/last-applied-configuration'"]},"namespaces":{"":false,"*":false,"nsName":true},"on_premises":true,"rate_limit":3,"selectors":{"ingress":"metadata.namespace==default","pods":"status.phase!=Running,spec.restartPolicy=Always"},"type":"pull"}
//
// swagger:model datasources.Kubernetes.Resources
type DatasourcesKubernetesResources struct {
	DatasourcesCommon

	DatasourcesRateLimiter

	DatasourcesPoller

	// Must be `kubernetes/resources`
	Category interface{} `json:"category,omitempty"`

	// strip out resource properties given their relative path
	Masks map[string][]string `json:"masks,omitempty"`

	// allows to include/exclude namespaces
	Namespaces map[string]bool `json:"namespaces,omitempty"`

	// Must be `true`
	OnPremises interface{} `json:"on_premises,omitempty"`

	// field selectors per resource [group]
	Selectors map[string]string `json:"selectors,omitempty"`

	// Must be `pull`
	Type interface{} `json:"type,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *DatasourcesKubernetesResources) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 DatasourcesCommon
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.DatasourcesCommon = aO0

	// AO1
	var aO1 DatasourcesRateLimiter
	if err := swag.ReadJSON(raw, &aO1); err != nil {
		return err
	}
	m.DatasourcesRateLimiter = aO1

	// AO2
	var aO2 DatasourcesPoller
	if err := swag.ReadJSON(raw, &aO2); err != nil {
		return err
	}
	m.DatasourcesPoller = aO2

	// AO3
	var dataAO3 struct {
		Category interface{} `json:"category,omitempty"`

		Masks map[string][]string `json:"masks,omitempty"`

		Namespaces map[string]bool `json:"namespaces,omitempty"`

		OnPremises interface{} `json:"on_premises,omitempty"`

		Selectors map[string]string `json:"selectors,omitempty"`

		Type interface{} `json:"type,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO3); err != nil {
		return err
	}

	m.Category = dataAO3.Category

	m.Masks = dataAO3.Masks

	m.Namespaces = dataAO3.Namespaces

	m.OnPremises = dataAO3.OnPremises

	m.Selectors = dataAO3.Selectors

	m.Type = dataAO3.Type

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m DatasourcesKubernetesResources) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 4)

	aO0, err := swag.WriteJSON(m.DatasourcesCommon)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	aO1, err := swag.WriteJSON(m.DatasourcesRateLimiter)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO1)

	aO2, err := swag.WriteJSON(m.DatasourcesPoller)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO2)
	var dataAO3 struct {
		Category interface{} `json:"category,omitempty"`

		Masks map[string][]string `json:"masks,omitempty"`

		Namespaces map[string]bool `json:"namespaces,omitempty"`

		OnPremises interface{} `json:"on_premises,omitempty"`

		Selectors map[string]string `json:"selectors,omitempty"`

		Type interface{} `json:"type,omitempty"`
	}

	dataAO3.Category = m.Category

	dataAO3.Masks = m.Masks

	dataAO3.Namespaces = m.Namespaces

	dataAO3.OnPremises = m.OnPremises

	dataAO3.Selectors = m.Selectors

	dataAO3.Type = m.Type

	jsonDataAO3, errAO3 := swag.WriteJSON(dataAO3)
	if errAO3 != nil {
		return nil, errAO3
	}
	_parts = append(_parts, jsonDataAO3)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this datasources kubernetes resources
func (m *DatasourcesKubernetesResources) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with DatasourcesCommon
	if err := m.DatasourcesCommon.Validate(formats); err != nil {
		res = append(res, err)
	}
	// validation for a type composition with DatasourcesRateLimiter
	if err := m.DatasourcesRateLimiter.Validate(formats); err != nil {
		res = append(res, err)
	}
	// validation for a type composition with DatasourcesPoller
	if err := m.DatasourcesPoller.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validate this datasources kubernetes resources based on the context it is used
func (m *DatasourcesKubernetesResources) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with DatasourcesCommon
	if err := m.DatasourcesCommon.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}
	// validation for a type composition with DatasourcesRateLimiter
	if err := m.DatasourcesRateLimiter.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}
	// validation for a type composition with DatasourcesPoller
	if err := m.DatasourcesPoller.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (m *DatasourcesKubernetesResources) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DatasourcesKubernetesResources) UnmarshalBinary(b []byte) error {
	var res DatasourcesKubernetesResources
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

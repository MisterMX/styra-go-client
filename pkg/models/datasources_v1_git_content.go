// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// DatasourcesV1GitContent git/content
// Example: {"category":"git/content","on_premises":false,"reference\"":"refs/heads/main","ssh_credentials":{"private_key":"git_ssh_key"},"type":"pull","url":"https://git.example.com"}
//
// swagger:model datasources.v1.Git.Content
type DatasourcesV1GitContent struct {
	DatasourcesV1GitCommon

	DatasourcesV1GitContentAllOf1
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *DatasourcesV1GitContent) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 DatasourcesV1GitCommon
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.DatasourcesV1GitCommon = aO0

	// AO1
	var aO1 DatasourcesV1GitContentAllOf1
	if err := swag.ReadJSON(raw, &aO1); err != nil {
		return err
	}
	m.DatasourcesV1GitContentAllOf1 = aO1

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m DatasourcesV1GitContent) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.DatasourcesV1GitCommon)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	aO1, err := swag.WriteJSON(m.DatasourcesV1GitContentAllOf1)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this datasources v1 git content
func (m *DatasourcesV1GitContent) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with DatasourcesV1GitCommon
	if err := m.DatasourcesV1GitCommon.Validate(formats); err != nil {
		res = append(res, err)
	}
	// validation for a type composition with DatasourcesV1GitContentAllOf1

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validate this datasources v1 git content based on the context it is used
func (m *DatasourcesV1GitContent) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with DatasourcesV1GitCommon
	if err := m.DatasourcesV1GitCommon.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}
	// validation for a type composition with DatasourcesV1GitContentAllOf1

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (m *DatasourcesV1GitContent) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DatasourcesV1GitContent) UnmarshalBinary(b []byte) error {
	var res DatasourcesV1GitContent
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// DatasourcesV1GitContentAllOf1 datasources v1 git content all of1
//
// swagger:model DatasourcesV1GitContentAllOf1
type DatasourcesV1GitContentAllOf1 interface{}

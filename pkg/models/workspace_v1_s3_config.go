// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// WorkspaceV1S3Config workspace v1 s3 config
//
// swagger:model workspace.v1.S3Config
type WorkspaceV1S3Config struct {

	// Access key ID and secret access key are stored at /v1/secrets/${access_keys}
	// Required: true
	AccessKeys *string `json:"access_keys"`

	// Custom endpoint or S3 compatible system endpoint (ie: https://storage.googleapis.com)
	Endpoint string `json:"endpoint,omitempty"`

	// S3 Region (ie: us-east-1 or auto)
	// Required: true
	Region *string `json:"region"`

	// S3 Bucket URL (ie: s3://styra-storage or gs://styra-storage/folder)
	// Required: true
	URL *string `json:"url"`
}

// Validate validates this workspace v1 s3 config
func (m *WorkspaceV1S3Config) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAccessKeys(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRegion(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateURL(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *WorkspaceV1S3Config) validateAccessKeys(formats strfmt.Registry) error {

	if err := validate.Required("access_keys", "body", m.AccessKeys); err != nil {
		return err
	}

	return nil
}

func (m *WorkspaceV1S3Config) validateRegion(formats strfmt.Registry) error {

	if err := validate.Required("region", "body", m.Region); err != nil {
		return err
	}

	return nil
}

func (m *WorkspaceV1S3Config) validateURL(formats strfmt.Registry) error {

	if err := validate.Required("url", "body", m.URL); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this workspace v1 s3 config based on context it is used
func (m *WorkspaceV1S3Config) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *WorkspaceV1S3Config) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *WorkspaceV1S3Config) UnmarshalBinary(b []byte) error {
	var res WorkspaceV1S3Config
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

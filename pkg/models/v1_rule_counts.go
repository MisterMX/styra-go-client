// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// V1RuleCounts v1 rule counts
//
// swagger:model v1.RuleCounts
type V1RuleCounts struct {

	// number of allow rules
	// Required: true
	// Read Only: true
	Allow int32 `json:"allow"`

	// number of deny rules
	// Required: true
	// Read Only: true
	Deny int32 `json:"deny"`

	// number of enforce rules
	// Required: true
	// Read Only: true
	Enforce int32 `json:"enforce"`

	// number of ignore rules
	// Required: true
	// Read Only: true
	Ignore int32 `json:"ignore"`

	// number of monitor rules
	// Required: true
	// Read Only: true
	Monitor int32 `json:"monitor"`

	// number of notify rules
	// Required: true
	// Read Only: true
	Notify int32 `json:"notify"`

	// number of unclassified rules
	// Required: true
	// Read Only: true
	Other int32 `json:"other"`

	// number of test rules
	// Required: true
	// Read Only: true
	Test int32 `json:"test"`

	// total number of rules
	// Required: true
	// Read Only: true
	Total int32 `json:"total"`
}

// Validate validates this v1 rule counts
func (m *V1RuleCounts) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAllow(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDeny(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEnforce(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIgnore(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMonitor(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNotify(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOther(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTest(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTotal(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1RuleCounts) validateAllow(formats strfmt.Registry) error {

	if err := validate.Required("allow", "body", int32(m.Allow)); err != nil {
		return err
	}

	return nil
}

func (m *V1RuleCounts) validateDeny(formats strfmt.Registry) error {

	if err := validate.Required("deny", "body", int32(m.Deny)); err != nil {
		return err
	}

	return nil
}

func (m *V1RuleCounts) validateEnforce(formats strfmt.Registry) error {

	if err := validate.Required("enforce", "body", int32(m.Enforce)); err != nil {
		return err
	}

	return nil
}

func (m *V1RuleCounts) validateIgnore(formats strfmt.Registry) error {

	if err := validate.Required("ignore", "body", int32(m.Ignore)); err != nil {
		return err
	}

	return nil
}

func (m *V1RuleCounts) validateMonitor(formats strfmt.Registry) error {

	if err := validate.Required("monitor", "body", int32(m.Monitor)); err != nil {
		return err
	}

	return nil
}

func (m *V1RuleCounts) validateNotify(formats strfmt.Registry) error {

	if err := validate.Required("notify", "body", int32(m.Notify)); err != nil {
		return err
	}

	return nil
}

func (m *V1RuleCounts) validateOther(formats strfmt.Registry) error {

	if err := validate.Required("other", "body", int32(m.Other)); err != nil {
		return err
	}

	return nil
}

func (m *V1RuleCounts) validateTest(formats strfmt.Registry) error {

	if err := validate.Required("test", "body", int32(m.Test)); err != nil {
		return err
	}

	return nil
}

func (m *V1RuleCounts) validateTotal(formats strfmt.Registry) error {

	if err := validate.Required("total", "body", int32(m.Total)); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this v1 rule counts based on the context it is used
func (m *V1RuleCounts) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAllow(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDeny(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEnforce(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIgnore(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMonitor(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNotify(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOther(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTest(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTotal(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1RuleCounts) contextValidateAllow(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "allow", "body", int32(m.Allow)); err != nil {
		return err
	}

	return nil
}

func (m *V1RuleCounts) contextValidateDeny(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "deny", "body", int32(m.Deny)); err != nil {
		return err
	}

	return nil
}

func (m *V1RuleCounts) contextValidateEnforce(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "enforce", "body", int32(m.Enforce)); err != nil {
		return err
	}

	return nil
}

func (m *V1RuleCounts) contextValidateIgnore(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "ignore", "body", int32(m.Ignore)); err != nil {
		return err
	}

	return nil
}

func (m *V1RuleCounts) contextValidateMonitor(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "monitor", "body", int32(m.Monitor)); err != nil {
		return err
	}

	return nil
}

func (m *V1RuleCounts) contextValidateNotify(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "notify", "body", int32(m.Notify)); err != nil {
		return err
	}

	return nil
}

func (m *V1RuleCounts) contextValidateOther(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "other", "body", int32(m.Other)); err != nil {
		return err
	}

	return nil
}

func (m *V1RuleCounts) contextValidateTest(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "test", "body", int32(m.Test)); err != nil {
		return err
	}

	return nil
}

func (m *V1RuleCounts) contextValidateTotal(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "total", "body", int32(m.Total)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1RuleCounts) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1RuleCounts) UnmarshalBinary(b []byte) error {
	var res V1RuleCounts
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

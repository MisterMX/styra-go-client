// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AnalysisV1DecisionsGetRequest analysis v1 decisions get request
//
// swagger:model analysis.v1.DecisionsGetRequest
type AnalysisV1DecisionsGetRequest struct {

	// return only essential decision fields
	// Required: true
	Compact *bool `json:"compact"`

	// continue from cursor position of previous query
	// Required: true
	Cursor *string `json:"cursor"`

	// client time zone offset. Local time expressions in query are adjusted with this offset
	// Required: true
	DefaultTimezone *string `json:"default_timezone"`

	// maximum decision time
	// Required: true
	// Format: date-time
	EndTime *strfmt.DateTime `json:"end_time"`

	// maximum number of decisions to return
	// Required: true
	Limit *int64 `json:"limit"`

	// ASC, DESC
	// Required: true
	Order *string `json:"order"`

	// comma-separated list of ALL, UNKNOWN, ADVICE, ALLOWED, DENIED, ERROR
	// Required: true
	ResultKind *string `json:"result_kind"`

	// search query
	// Required: true
	Search *string `json:"search"`

	// stack ID
	// Required: true
	Stack *string `json:"stack"`

	// minimum decision time
	// Required: true
	// Format: date-time
	StartTime *strfmt.DateTime `json:"start_time"`

	// system ID
	// Required: true
	System *string `json:"system"`
}

// Validate validates this analysis v1 decisions get request
func (m *AnalysisV1DecisionsGetRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCompact(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCursor(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDefaultTimezone(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEndTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLimit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrder(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResultKind(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSearch(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStack(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSystem(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AnalysisV1DecisionsGetRequest) validateCompact(formats strfmt.Registry) error {

	if err := validate.Required("compact", "body", m.Compact); err != nil {
		return err
	}

	return nil
}

func (m *AnalysisV1DecisionsGetRequest) validateCursor(formats strfmt.Registry) error {

	if err := validate.Required("cursor", "body", m.Cursor); err != nil {
		return err
	}

	return nil
}

func (m *AnalysisV1DecisionsGetRequest) validateDefaultTimezone(formats strfmt.Registry) error {

	if err := validate.Required("default_timezone", "body", m.DefaultTimezone); err != nil {
		return err
	}

	return nil
}

func (m *AnalysisV1DecisionsGetRequest) validateEndTime(formats strfmt.Registry) error {

	if err := validate.Required("end_time", "body", m.EndTime); err != nil {
		return err
	}

	if err := validate.FormatOf("end_time", "body", "date-time", m.EndTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *AnalysisV1DecisionsGetRequest) validateLimit(formats strfmt.Registry) error {

	if err := validate.Required("limit", "body", m.Limit); err != nil {
		return err
	}

	return nil
}

func (m *AnalysisV1DecisionsGetRequest) validateOrder(formats strfmt.Registry) error {

	if err := validate.Required("order", "body", m.Order); err != nil {
		return err
	}

	return nil
}

func (m *AnalysisV1DecisionsGetRequest) validateResultKind(formats strfmt.Registry) error {

	if err := validate.Required("result_kind", "body", m.ResultKind); err != nil {
		return err
	}

	return nil
}

func (m *AnalysisV1DecisionsGetRequest) validateSearch(formats strfmt.Registry) error {

	if err := validate.Required("search", "body", m.Search); err != nil {
		return err
	}

	return nil
}

func (m *AnalysisV1DecisionsGetRequest) validateStack(formats strfmt.Registry) error {

	if err := validate.Required("stack", "body", m.Stack); err != nil {
		return err
	}

	return nil
}

func (m *AnalysisV1DecisionsGetRequest) validateStartTime(formats strfmt.Registry) error {

	if err := validate.Required("start_time", "body", m.StartTime); err != nil {
		return err
	}

	if err := validate.FormatOf("start_time", "body", "date-time", m.StartTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *AnalysisV1DecisionsGetRequest) validateSystem(formats strfmt.Registry) error {

	if err := validate.Required("system", "body", m.System); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this analysis v1 decisions get request based on context it is used
func (m *AnalysisV1DecisionsGetRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *AnalysisV1DecisionsGetRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AnalysisV1DecisionsGetRequest) UnmarshalBinary(b []byte) error {
	var res AnalysisV1DecisionsGetRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// V1SystemConfig v1 system config
//
// swagger:model v1.SystemConfig
type V1SystemConfig struct {

	// authorization config
	// Required: true
	// Read Only: true
	Authz *V1AuthzConfig `json:"authz"`

	// bundle registry configuration
	BundleRegistry *V1BundleRegistryConfig `json:"bundle_registry,omitempty"`

	// datasources created for the system
	// Read Only: true
	Datasources []*V1DatasourceConfig `json:"datasources"`

	// location of key attributes and additional columns in the decisions grouped by policy entry point path
	DecisionMappings map[string]V1RuleDecisionMappings `json:"decision_mappings,omitempty"`

	// configuration settings to be used by the system agents
	DeploymentParameters *V1SystemDeploymentParameters `json:"deployment_parameters,omitempty"`

	// description for the system
	Description string `json:"description,omitempty"`

	// current deployment errors
	// Read Only: true
	Errors map[string]V1AgentErrors `json:"errors,omitempty"`

	// external system ID
	ExternalID string `json:"external_id,omitempty"`

	// system ID
	// Required: true
	// Read Only: true
	ID string `json:"id"`

	// installation instructions by installation method and asset type (deprecated)
	// Read Only: true
	Install map[string]V1SystemConfigInstall `json:"install,omitempty"`

	// system object metadata
	// Required: true
	// Read Only: true
	Metadata *V1ObjectMeta `json:"metadata"`

	// system name
	// Required: true
	Name *string `json:"name"`

	// policies created for the system
	// Required: true
	// Read Only: true
	Policies []*V1PolicyConfig `json:"policies"`

	// prevents users from modifying policies using Styra UIs
	ReadOnly *bool `json:"read_only,omitempty"`

	// source control system configuration
	SourceControl *V1SourceControlConfig `json:"source_control,omitempty"`

	// system status
	// Required: true
	// Read Only: true
	Status string `json:"status"`

	// tokens created for the system
	// Read Only: true
	Tokens []*V1Token `json:"tokens"`

	// system type e.g. kubernetes
	// Required: true
	Type *string `json:"type"`

	// system type parameter values (for template.* types)
	TypeParameters interface{} `json:"type_parameters,omitempty"`

	// uninstallation instructions by installation method (deprecated)
	// Read Only: true
	Uninstall map[string]string `json:"uninstall,omitempty"`

	// current deployment warnings
	// Read Only: true
	Warnings map[string]V1SystemConfigWarnings `json:"warnings,omitempty"`
}

// Validate validates this v1 system config
func (m *V1SystemConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAuthz(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBundleRegistry(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDatasources(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDecisionMappings(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDeploymentParameters(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateErrors(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMetadata(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePolicies(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSourceControl(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTokens(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWarnings(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1SystemConfig) validateAuthz(formats strfmt.Registry) error {

	if err := validate.Required("authz", "body", m.Authz); err != nil {
		return err
	}

	if m.Authz != nil {
		if err := m.Authz.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("authz")
			}
			return err
		}
	}

	return nil
}

func (m *V1SystemConfig) validateBundleRegistry(formats strfmt.Registry) error {
	if swag.IsZero(m.BundleRegistry) { // not required
		return nil
	}

	if m.BundleRegistry != nil {
		if err := m.BundleRegistry.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("bundle_registry")
			}
			return err
		}
	}

	return nil
}

func (m *V1SystemConfig) validateDatasources(formats strfmt.Registry) error {
	if swag.IsZero(m.Datasources) { // not required
		return nil
	}

	for i := 0; i < len(m.Datasources); i++ {
		if swag.IsZero(m.Datasources[i]) { // not required
			continue
		}

		if m.Datasources[i] != nil {
			if err := m.Datasources[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("datasources" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V1SystemConfig) validateDecisionMappings(formats strfmt.Registry) error {
	if swag.IsZero(m.DecisionMappings) { // not required
		return nil
	}

	for k := range m.DecisionMappings {

		if err := validate.Required("decision_mappings"+"."+k, "body", m.DecisionMappings[k]); err != nil {
			return err
		}
		if val, ok := m.DecisionMappings[k]; ok {
			if err := val.Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *V1SystemConfig) validateDeploymentParameters(formats strfmt.Registry) error {
	if swag.IsZero(m.DeploymentParameters) { // not required
		return nil
	}

	if m.DeploymentParameters != nil {
		if err := m.DeploymentParameters.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("deployment_parameters")
			}
			return err
		}
	}

	return nil
}

func (m *V1SystemConfig) validateErrors(formats strfmt.Registry) error {
	if swag.IsZero(m.Errors) { // not required
		return nil
	}

	for k := range m.Errors {

		if err := validate.Required("errors"+"."+k, "body", m.Errors[k]); err != nil {
			return err
		}
		if val, ok := m.Errors[k]; ok {
			if err := val.Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *V1SystemConfig) validateID(formats strfmt.Registry) error {

	if err := validate.RequiredString("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *V1SystemConfig) validateMetadata(formats strfmt.Registry) error {

	if err := validate.Required("metadata", "body", m.Metadata); err != nil {
		return err
	}

	if m.Metadata != nil {
		if err := m.Metadata.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("metadata")
			}
			return err
		}
	}

	return nil
}

func (m *V1SystemConfig) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *V1SystemConfig) validatePolicies(formats strfmt.Registry) error {

	if err := validate.Required("policies", "body", m.Policies); err != nil {
		return err
	}

	for i := 0; i < len(m.Policies); i++ {
		if swag.IsZero(m.Policies[i]) { // not required
			continue
		}

		if m.Policies[i] != nil {
			if err := m.Policies[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("policies" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V1SystemConfig) validateSourceControl(formats strfmt.Registry) error {
	if swag.IsZero(m.SourceControl) { // not required
		return nil
	}

	if m.SourceControl != nil {
		if err := m.SourceControl.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("source_control")
			}
			return err
		}
	}

	return nil
}

func (m *V1SystemConfig) validateStatus(formats strfmt.Registry) error {

	if err := validate.RequiredString("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

func (m *V1SystemConfig) validateTokens(formats strfmt.Registry) error {
	if swag.IsZero(m.Tokens) { // not required
		return nil
	}

	for i := 0; i < len(m.Tokens); i++ {
		if swag.IsZero(m.Tokens[i]) { // not required
			continue
		}

		if m.Tokens[i] != nil {
			if err := m.Tokens[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("tokens" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V1SystemConfig) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

func (m *V1SystemConfig) validateWarnings(formats strfmt.Registry) error {
	if swag.IsZero(m.Warnings) { // not required
		return nil
	}

	for k := range m.Warnings {

		if err := validate.Required("warnings"+"."+k, "body", m.Warnings[k]); err != nil {
			return err
		}

		if err := m.Warnings[k].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("warnings" + "." + k)
			}
			return err
		}

	}

	return nil
}

// ContextValidate validate this v1 system config based on the context it is used
func (m *V1SystemConfig) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAuthz(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateBundleRegistry(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDatasources(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDecisionMappings(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDeploymentParameters(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateErrors(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateInstall(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMetadata(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePolicies(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSourceControl(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTokens(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUninstall(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateWarnings(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1SystemConfig) contextValidateAuthz(ctx context.Context, formats strfmt.Registry) error {

	if m.Authz != nil {
		if err := m.Authz.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("authz")
			}
			return err
		}
	}

	return nil
}

func (m *V1SystemConfig) contextValidateBundleRegistry(ctx context.Context, formats strfmt.Registry) error {

	if m.BundleRegistry != nil {
		if err := m.BundleRegistry.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("bundle_registry")
			}
			return err
		}
	}

	return nil
}

func (m *V1SystemConfig) contextValidateDatasources(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "datasources", "body", []*V1DatasourceConfig(m.Datasources)); err != nil {
		return err
	}

	for i := 0; i < len(m.Datasources); i++ {

		if m.Datasources[i] != nil {
			if err := m.Datasources[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("datasources" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V1SystemConfig) contextValidateDecisionMappings(ctx context.Context, formats strfmt.Registry) error {

	for k := range m.DecisionMappings {

		if val, ok := m.DecisionMappings[k]; ok {
			if err := val.ContextValidate(ctx, formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *V1SystemConfig) contextValidateDeploymentParameters(ctx context.Context, formats strfmt.Registry) error {

	if m.DeploymentParameters != nil {
		if err := m.DeploymentParameters.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("deployment_parameters")
			}
			return err
		}
	}

	return nil
}

func (m *V1SystemConfig) contextValidateErrors(ctx context.Context, formats strfmt.Registry) error {

	for k := range m.Errors {

		if val, ok := m.Errors[k]; ok {
			if err := val.ContextValidate(ctx, formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *V1SystemConfig) contextValidateID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "id", "body", string(m.ID)); err != nil {
		return err
	}

	return nil
}

func (m *V1SystemConfig) contextValidateInstall(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *V1SystemConfig) contextValidateMetadata(ctx context.Context, formats strfmt.Registry) error {

	if m.Metadata != nil {
		if err := m.Metadata.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("metadata")
			}
			return err
		}
	}

	return nil
}

func (m *V1SystemConfig) contextValidatePolicies(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "policies", "body", []*V1PolicyConfig(m.Policies)); err != nil {
		return err
	}

	for i := 0; i < len(m.Policies); i++ {

		if m.Policies[i] != nil {
			if err := m.Policies[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("policies" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V1SystemConfig) contextValidateSourceControl(ctx context.Context, formats strfmt.Registry) error {

	if m.SourceControl != nil {
		if err := m.SourceControl.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("source_control")
			}
			return err
		}
	}

	return nil
}

func (m *V1SystemConfig) contextValidateStatus(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "status", "body", string(m.Status)); err != nil {
		return err
	}

	return nil
}

func (m *V1SystemConfig) contextValidateTokens(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "tokens", "body", []*V1Token(m.Tokens)); err != nil {
		return err
	}

	for i := 0; i < len(m.Tokens); i++ {

		if m.Tokens[i] != nil {
			if err := m.Tokens[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("tokens" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V1SystemConfig) contextValidateUninstall(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *V1SystemConfig) contextValidateWarnings(ctx context.Context, formats strfmt.Registry) error {

	for k := range m.Warnings {

		if err := m.Warnings[k].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("warnings" + "." + k)
			}
			return err
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1SystemConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1SystemConfig) UnmarshalBinary(b []byte) error {
	var res V1SystemConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

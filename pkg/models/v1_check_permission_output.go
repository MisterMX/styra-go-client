// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// V1CheckPermissionOutput v1 check permission output
//
// swagger:model v1.CheckPermissionOutput
type V1CheckPermissionOutput struct {

	// allowed
	// Required: true
	Allowed *bool `json:"allowed"`

	// body
	Body interface{} `json:"body,omitempty"`

	// check option
	// Required: true
	CheckOption *string `json:"check_option"`

	// eval error
	// Required: true
	EvalError *bool `json:"eval_error"`

	// operation
	// Required: true
	Operation *string `json:"operation"`

	// path
	// Required: true
	Path *string `json:"path"`
}

// Validate validates this v1 check permission output
func (m *V1CheckPermissionOutput) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAllowed(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCheckOption(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEvalError(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOperation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePath(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1CheckPermissionOutput) validateAllowed(formats strfmt.Registry) error {

	if err := validate.Required("allowed", "body", m.Allowed); err != nil {
		return err
	}

	return nil
}

func (m *V1CheckPermissionOutput) validateCheckOption(formats strfmt.Registry) error {

	if err := validate.Required("check_option", "body", m.CheckOption); err != nil {
		return err
	}

	return nil
}

func (m *V1CheckPermissionOutput) validateEvalError(formats strfmt.Registry) error {

	if err := validate.Required("eval_error", "body", m.EvalError); err != nil {
		return err
	}

	return nil
}

func (m *V1CheckPermissionOutput) validateOperation(formats strfmt.Registry) error {

	if err := validate.Required("operation", "body", m.Operation); err != nil {
		return err
	}

	return nil
}

func (m *V1CheckPermissionOutput) validatePath(formats strfmt.Registry) error {

	if err := validate.Required("path", "body", m.Path); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this v1 check permission output based on context it is used
func (m *V1CheckPermissionOutput) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *V1CheckPermissionOutput) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1CheckPermissionOutput) UnmarshalBinary(b []byte) error {
	var res V1CheckPermissionOutput
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

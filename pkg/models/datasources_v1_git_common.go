// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DatasourcesV1GitCommon datasources v1 git common
//
// swagger:model datasources.v1.Git.Common
type DatasourcesV1GitCommon struct {
	DatasourcesV1Common

	DatasourcesV1Poller

	DatasourcesV1RateLimiter

	// Secret ID with credentials
	Credentials string `json:"credentials,omitempty"`

	// reference
	Reference *string `json:"reference,omitempty"`

	// ssh credentials
	SSHCredentials *DatasourcesV1GitCommonAO3SSHCredentials `json:"ssh_credentials,omitempty"`

	// timeout
	Timeout *string `json:"timeout,omitempty"`

	// Git URL
	// Required: true
	URL *string `json:"url"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *DatasourcesV1GitCommon) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 DatasourcesV1Common
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.DatasourcesV1Common = aO0

	// AO1
	var aO1 DatasourcesV1Poller
	if err := swag.ReadJSON(raw, &aO1); err != nil {
		return err
	}
	m.DatasourcesV1Poller = aO1

	// AO2
	var aO2 DatasourcesV1RateLimiter
	if err := swag.ReadJSON(raw, &aO2); err != nil {
		return err
	}
	m.DatasourcesV1RateLimiter = aO2

	// AO3
	var dataAO3 struct {
		Credentials string `json:"credentials,omitempty"`

		Reference *string `json:"reference,omitempty"`

		SSHCredentials *DatasourcesV1GitCommonAO3SSHCredentials `json:"ssh_credentials,omitempty"`

		Timeout *string `json:"timeout,omitempty"`

		URL *string `json:"url"`
	}
	if err := swag.ReadJSON(raw, &dataAO3); err != nil {
		return err
	}

	m.Credentials = dataAO3.Credentials

	m.Reference = dataAO3.Reference

	m.SSHCredentials = dataAO3.SSHCredentials

	m.Timeout = dataAO3.Timeout

	m.URL = dataAO3.URL

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m DatasourcesV1GitCommon) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 4)

	aO0, err := swag.WriteJSON(m.DatasourcesV1Common)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	aO1, err := swag.WriteJSON(m.DatasourcesV1Poller)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO1)

	aO2, err := swag.WriteJSON(m.DatasourcesV1RateLimiter)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO2)
	var dataAO3 struct {
		Credentials string `json:"credentials,omitempty"`

		Reference *string `json:"reference,omitempty"`

		SSHCredentials *DatasourcesV1GitCommonAO3SSHCredentials `json:"ssh_credentials,omitempty"`

		Timeout *string `json:"timeout,omitempty"`

		URL *string `json:"url"`
	}

	dataAO3.Credentials = m.Credentials

	dataAO3.Reference = m.Reference

	dataAO3.SSHCredentials = m.SSHCredentials

	dataAO3.Timeout = m.Timeout

	dataAO3.URL = m.URL

	jsonDataAO3, errAO3 := swag.WriteJSON(dataAO3)
	if errAO3 != nil {
		return nil, errAO3
	}
	_parts = append(_parts, jsonDataAO3)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this datasources v1 git common
func (m *DatasourcesV1GitCommon) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with DatasourcesV1Common
	if err := m.DatasourcesV1Common.Validate(formats); err != nil {
		res = append(res, err)
	}
	// validation for a type composition with DatasourcesV1Poller
	if err := m.DatasourcesV1Poller.Validate(formats); err != nil {
		res = append(res, err)
	}
	// validation for a type composition with DatasourcesV1RateLimiter
	if err := m.DatasourcesV1RateLimiter.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSSHCredentials(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateURL(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DatasourcesV1GitCommon) validateSSHCredentials(formats strfmt.Registry) error {

	if swag.IsZero(m.SSHCredentials) { // not required
		return nil
	}

	if m.SSHCredentials != nil {
		if err := m.SSHCredentials.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ssh_credentials")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ssh_credentials")
			}
			return err
		}
	}

	return nil
}

func (m *DatasourcesV1GitCommon) validateURL(formats strfmt.Registry) error {

	if err := validate.Required("url", "body", m.URL); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this datasources v1 git common based on the context it is used
func (m *DatasourcesV1GitCommon) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with DatasourcesV1Common
	if err := m.DatasourcesV1Common.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}
	// validation for a type composition with DatasourcesV1Poller
	if err := m.DatasourcesV1Poller.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}
	// validation for a type composition with DatasourcesV1RateLimiter
	if err := m.DatasourcesV1RateLimiter.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSSHCredentials(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DatasourcesV1GitCommon) contextValidateSSHCredentials(ctx context.Context, formats strfmt.Registry) error {

	if m.SSHCredentials != nil {
		if err := m.SSHCredentials.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ssh_credentials")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ssh_credentials")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DatasourcesV1GitCommon) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DatasourcesV1GitCommon) UnmarshalBinary(b []byte) error {
	var res DatasourcesV1GitCommon
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// DatasourcesV1GitCommonAO3SSHCredentials datasources v1 git common a o3 SSH credentials
//
// swagger:model DatasourcesV1GitCommonAO3SSHCredentials
type DatasourcesV1GitCommonAO3SSHCredentials struct {

	// Secret ID with passphrase
	Passphrase string `json:"passphrase,omitempty"`

	// Secret ID with private key
	// Required: true
	PrivateKey *string `json:"private_key"`
}

// Validate validates this datasources v1 git common a o3 SSH credentials
func (m *DatasourcesV1GitCommonAO3SSHCredentials) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePrivateKey(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DatasourcesV1GitCommonAO3SSHCredentials) validatePrivateKey(formats strfmt.Registry) error {

	if err := validate.Required("ssh_credentials"+"."+"private_key", "body", m.PrivateKey); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this datasources v1 git common a o3 SSH credentials based on context it is used
func (m *DatasourcesV1GitCommonAO3SSHCredentials) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *DatasourcesV1GitCommonAO3SSHCredentials) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DatasourcesV1GitCommonAO3SSHCredentials) UnmarshalBinary(b []byte) error {
	var res DatasourcesV1GitCommonAO3SSHCredentials
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

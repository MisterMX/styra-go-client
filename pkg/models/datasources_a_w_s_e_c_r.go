// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// DatasourcesAWSECR aws/ecr
// Example: {"category":"aws/ecr","credentials":"aws_creds","on_premises":false,"region":"us-east-1","type":"pull"}
//
// swagger:model datasources.AWS.ECR
type DatasourcesAWSECR struct {
	DatasourcesCommon

	DatasourcesRateLimiter

	DatasourcesPoller

	DatasourcesAWSCommon

	// Registry ID
	RegistryID string `json:"RegistryId,omitempty"`

	// Must be `aws/ecr`
	Category interface{} `json:"category,omitempty"`

	// Must be `pull`
	Type interface{} `json:"type,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *DatasourcesAWSECR) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 DatasourcesCommon
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.DatasourcesCommon = aO0

	// AO1
	var aO1 DatasourcesRateLimiter
	if err := swag.ReadJSON(raw, &aO1); err != nil {
		return err
	}
	m.DatasourcesRateLimiter = aO1

	// AO2
	var aO2 DatasourcesPoller
	if err := swag.ReadJSON(raw, &aO2); err != nil {
		return err
	}
	m.DatasourcesPoller = aO2

	// AO3
	var aO3 DatasourcesAWSCommon
	if err := swag.ReadJSON(raw, &aO3); err != nil {
		return err
	}
	m.DatasourcesAWSCommon = aO3

	// AO4
	var dataAO4 struct {
		RegistryID string `json:"RegistryId,omitempty"`

		Category interface{} `json:"category,omitempty"`

		Type interface{} `json:"type,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO4); err != nil {
		return err
	}

	m.RegistryID = dataAO4.RegistryID

	m.Category = dataAO4.Category

	m.Type = dataAO4.Type

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m DatasourcesAWSECR) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 5)

	aO0, err := swag.WriteJSON(m.DatasourcesCommon)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	aO1, err := swag.WriteJSON(m.DatasourcesRateLimiter)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO1)

	aO2, err := swag.WriteJSON(m.DatasourcesPoller)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO2)

	aO3, err := swag.WriteJSON(m.DatasourcesAWSCommon)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO3)
	var dataAO4 struct {
		RegistryID string `json:"RegistryId,omitempty"`

		Category interface{} `json:"category,omitempty"`

		Type interface{} `json:"type,omitempty"`
	}

	dataAO4.RegistryID = m.RegistryID

	dataAO4.Category = m.Category

	dataAO4.Type = m.Type

	jsonDataAO4, errAO4 := swag.WriteJSON(dataAO4)
	if errAO4 != nil {
		return nil, errAO4
	}
	_parts = append(_parts, jsonDataAO4)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this datasources a w s e c r
func (m *DatasourcesAWSECR) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with DatasourcesCommon
	if err := m.DatasourcesCommon.Validate(formats); err != nil {
		res = append(res, err)
	}
	// validation for a type composition with DatasourcesRateLimiter
	if err := m.DatasourcesRateLimiter.Validate(formats); err != nil {
		res = append(res, err)
	}
	// validation for a type composition with DatasourcesPoller
	if err := m.DatasourcesPoller.Validate(formats); err != nil {
		res = append(res, err)
	}
	// validation for a type composition with DatasourcesAWSCommon
	if err := m.DatasourcesAWSCommon.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validate this datasources a w s e c r based on the context it is used
func (m *DatasourcesAWSECR) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with DatasourcesCommon
	if err := m.DatasourcesCommon.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}
	// validation for a type composition with DatasourcesRateLimiter
	if err := m.DatasourcesRateLimiter.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}
	// validation for a type composition with DatasourcesPoller
	if err := m.DatasourcesPoller.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}
	// validation for a type composition with DatasourcesAWSCommon
	if err := m.DatasourcesAWSCommon.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (m *DatasourcesAWSECR) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DatasourcesAWSECR) UnmarshalBinary(b []byte) error {
	var res DatasourcesAWSECR
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

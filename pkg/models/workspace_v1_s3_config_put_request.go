// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// WorkspaceV1S3ConfigPutRequest workspace v1 s3 config put request
//
// swagger:model workspace.v1.S3ConfigPutRequest
type WorkspaceV1S3ConfigPutRequest struct {

	// S3 exporter interval: range [30s,1h]
	Interval *string `json:"interval,omitempty"`

	// s3 decisions
	S3Decisions *WorkspaceV1S3Config `json:"s3_decisions,omitempty"`
}

// Validate validates this workspace v1 s3 config put request
func (m *WorkspaceV1S3ConfigPutRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateS3Decisions(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *WorkspaceV1S3ConfigPutRequest) validateS3Decisions(formats strfmt.Registry) error {
	if swag.IsZero(m.S3Decisions) { // not required
		return nil
	}

	if m.S3Decisions != nil {
		if err := m.S3Decisions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("s3_decisions")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("s3_decisions")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this workspace v1 s3 config put request based on the context it is used
func (m *WorkspaceV1S3ConfigPutRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateS3Decisions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *WorkspaceV1S3ConfigPutRequest) contextValidateS3Decisions(ctx context.Context, formats strfmt.Registry) error {

	if m.S3Decisions != nil {
		if err := m.S3Decisions.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("s3_decisions")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("s3_decisions")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *WorkspaceV1S3ConfigPutRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *WorkspaceV1S3ConfigPutRequest) UnmarshalBinary(b []byte) error {
	var res WorkspaceV1S3ConfigPutRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

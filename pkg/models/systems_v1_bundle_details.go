// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SystemsV1BundleDetails systems v1 bundle details
//
// swagger:model systems.v1.BundleDetails
type SystemsV1BundleDetails struct {

	// activation percentage
	// Required: true
	Active *int64 `json:"active"`

	// when created
	// Required: true
	// Format: date-time
	CreatedAt *strfmt.DateTime `json:"created_at"`

	// URL to download the bundle
	// Required: true
	DownloadURL *string `json:"download_url"`

	// bundle ID
	// Required: true
	ID *string `json:"id"`

	// when deployed last, if ever
	// Format: date-time
	LastDeployedAt strfmt.DateTime `json:"last_deployed_at,omitempty"`

	// minimum OPA version required by the bundle if known
	MinimumOpaVersion string `json:"minimum_opa_version,omitempty"`

	// bundle revision identifier
	// Required: true
	Revision *string `json:"revision"`

	// size in bytes
	// Required: true
	Size *int64 `json:"size"`

	// bundle version
	// Required: true
	Version *int64 `json:"version"`
}

// Validate validates this systems v1 bundle details
func (m *SystemsV1BundleDetails) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateActive(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDownloadURL(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastDeployedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRevision(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSize(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVersion(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SystemsV1BundleDetails) validateActive(formats strfmt.Registry) error {

	if err := validate.Required("active", "body", m.Active); err != nil {
		return err
	}

	return nil
}

func (m *SystemsV1BundleDetails) validateCreatedAt(formats strfmt.Registry) error {

	if err := validate.Required("created_at", "body", m.CreatedAt); err != nil {
		return err
	}

	if err := validate.FormatOf("created_at", "body", "date-time", m.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *SystemsV1BundleDetails) validateDownloadURL(formats strfmt.Registry) error {

	if err := validate.Required("download_url", "body", m.DownloadURL); err != nil {
		return err
	}

	return nil
}

func (m *SystemsV1BundleDetails) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *SystemsV1BundleDetails) validateLastDeployedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.LastDeployedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("last_deployed_at", "body", "date-time", m.LastDeployedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *SystemsV1BundleDetails) validateRevision(formats strfmt.Registry) error {

	if err := validate.Required("revision", "body", m.Revision); err != nil {
		return err
	}

	return nil
}

func (m *SystemsV1BundleDetails) validateSize(formats strfmt.Registry) error {

	if err := validate.Required("size", "body", m.Size); err != nil {
		return err
	}

	return nil
}

func (m *SystemsV1BundleDetails) validateVersion(formats strfmt.Registry) error {

	if err := validate.Required("version", "body", m.Version); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this systems v1 bundle details based on context it is used
func (m *SystemsV1BundleDetails) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *SystemsV1BundleDetails) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SystemsV1BundleDetails) UnmarshalBinary(b []byte) error {
	var res SystemsV1BundleDetails
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// DataV1DataRequest data v1 data request
//
// swagger:model data.v1.DataRequest
type DataV1DataRequest struct {

	// input
	Input interface{} `json:"input,omitempty"`

	// jsonpath
	Jsonpath string `json:"jsonpath,omitempty"`

	// Mocks http.send and opa.runtime builtins
	Mocks *SystemsV1BuiltinMocks `json:"mocks,omitempty"`

	// query package
	QueryPackage string `json:"query_package,omitempty"`

	// rego
	Rego string `json:"rego,omitempty"`

	// rego modules
	RegoModules map[string]string `json:"rego_modules,omitempty"`
}

// Validate validates this data v1 data request
func (m *DataV1DataRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMocks(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DataV1DataRequest) validateMocks(formats strfmt.Registry) error {
	if swag.IsZero(m.Mocks) { // not required
		return nil
	}

	if m.Mocks != nil {
		if err := m.Mocks.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("mocks")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("mocks")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this data v1 data request based on the context it is used
func (m *DataV1DataRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateMocks(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DataV1DataRequest) contextValidateMocks(ctx context.Context, formats strfmt.Registry) error {

	if m.Mocks != nil {
		if err := m.Mocks.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("mocks")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("mocks")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DataV1DataRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DataV1DataRequest) UnmarshalBinary(b []byte) error {
	var res DataV1DataRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

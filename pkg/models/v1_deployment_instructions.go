// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// V1DeploymentInstructions v1 deployment instructions
//
// swagger:model v1.DeploymentInstructions
type V1DeploymentInstructions struct {

	// installation instructions for various tools
	// Read Only: true
	Install []*V1DeploymentInstruction `json:"install"`

	// uninstallation instructions for various tools
	// Read Only: true
	Uninstall []*V1DeploymentInstruction `json:"uninstall"`
}

// Validate validates this v1 deployment instructions
func (m *V1DeploymentInstructions) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateInstall(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUninstall(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1DeploymentInstructions) validateInstall(formats strfmt.Registry) error {
	if swag.IsZero(m.Install) { // not required
		return nil
	}

	for i := 0; i < len(m.Install); i++ {
		if swag.IsZero(m.Install[i]) { // not required
			continue
		}

		if m.Install[i] != nil {
			if err := m.Install[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("install" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V1DeploymentInstructions) validateUninstall(formats strfmt.Registry) error {
	if swag.IsZero(m.Uninstall) { // not required
		return nil
	}

	for i := 0; i < len(m.Uninstall); i++ {
		if swag.IsZero(m.Uninstall[i]) { // not required
			continue
		}

		if m.Uninstall[i] != nil {
			if err := m.Uninstall[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("uninstall" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this v1 deployment instructions based on the context it is used
func (m *V1DeploymentInstructions) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateInstall(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUninstall(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1DeploymentInstructions) contextValidateInstall(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "install", "body", []*V1DeploymentInstruction(m.Install)); err != nil {
		return err
	}

	for i := 0; i < len(m.Install); i++ {

		if m.Install[i] != nil {
			if err := m.Install[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("install" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V1DeploymentInstructions) contextValidateUninstall(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "uninstall", "body", []*V1DeploymentInstruction(m.Uninstall)); err != nil {
		return err
	}

	for i := 0; i < len(m.Uninstall); i++ {

		if m.Uninstall[i] != nil {
			if err := m.Uninstall[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("uninstall" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1DeploymentInstructions) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1DeploymentInstructions) UnmarshalBinary(b []byte) error {
	var res V1DeploymentInstructions
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

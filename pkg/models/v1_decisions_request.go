// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// V1DecisionsRequest v1 decisions request
//
// swagger:model v1.DecisionsRequest
type V1DecisionsRequest struct {

	// cursor
	// Required: true
	Cursor *string `json:"Cursor"`

	// decision search
	// Required: true
	DecisionSearch *string `json:"DecisionSearch"`

	// default timezone
	// Required: true
	DefaultTimezone *string `json:"DefaultTimezone"`

	// end time
	// Required: true
	// Format: date-time
	EndTime *strfmt.DateTime `json:"EndTime"`

	// limit
	// Required: true
	Limit *int64 `json:"Limit"`

	// order
	// Required: true
	Order *string `json:"Order"`

	// result kind
	// Required: true
	ResultKind *string `json:"ResultKind"`

	// stack Id
	// Required: true
	StackID *string `json:"StackId"`

	// start time
	// Required: true
	// Format: date-time
	StartTime *strfmt.DateTime `json:"StartTime"`

	// system Id
	// Required: true
	SystemID *string `json:"SystemId"`
}

// Validate validates this v1 decisions request
func (m *V1DecisionsRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCursor(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDecisionSearch(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDefaultTimezone(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEndTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLimit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrder(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResultKind(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStackID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSystemID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1DecisionsRequest) validateCursor(formats strfmt.Registry) error {

	if err := validate.Required("Cursor", "body", m.Cursor); err != nil {
		return err
	}

	return nil
}

func (m *V1DecisionsRequest) validateDecisionSearch(formats strfmt.Registry) error {

	if err := validate.Required("DecisionSearch", "body", m.DecisionSearch); err != nil {
		return err
	}

	return nil
}

func (m *V1DecisionsRequest) validateDefaultTimezone(formats strfmt.Registry) error {

	if err := validate.Required("DefaultTimezone", "body", m.DefaultTimezone); err != nil {
		return err
	}

	return nil
}

func (m *V1DecisionsRequest) validateEndTime(formats strfmt.Registry) error {

	if err := validate.Required("EndTime", "body", m.EndTime); err != nil {
		return err
	}

	if err := validate.FormatOf("EndTime", "body", "date-time", m.EndTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *V1DecisionsRequest) validateLimit(formats strfmt.Registry) error {

	if err := validate.Required("Limit", "body", m.Limit); err != nil {
		return err
	}

	return nil
}

func (m *V1DecisionsRequest) validateOrder(formats strfmt.Registry) error {

	if err := validate.Required("Order", "body", m.Order); err != nil {
		return err
	}

	return nil
}

func (m *V1DecisionsRequest) validateResultKind(formats strfmt.Registry) error {

	if err := validate.Required("ResultKind", "body", m.ResultKind); err != nil {
		return err
	}

	return nil
}

func (m *V1DecisionsRequest) validateStackID(formats strfmt.Registry) error {

	if err := validate.Required("StackId", "body", m.StackID); err != nil {
		return err
	}

	return nil
}

func (m *V1DecisionsRequest) validateStartTime(formats strfmt.Registry) error {

	if err := validate.Required("StartTime", "body", m.StartTime); err != nil {
		return err
	}

	if err := validate.FormatOf("StartTime", "body", "date-time", m.StartTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *V1DecisionsRequest) validateSystemID(formats strfmt.Registry) error {

	if err := validate.Required("SystemId", "body", m.SystemID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this v1 decisions request based on context it is used
func (m *V1DecisionsRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *V1DecisionsRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1DecisionsRequest) UnmarshalBinary(b []byte) error {
	var res V1DecisionsRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

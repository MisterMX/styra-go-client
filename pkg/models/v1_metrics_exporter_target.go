// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// V1MetricsExporterTarget v1 metrics exporter target
//
// swagger:model v1.MetricsExporterTarget
type V1MetricsExporterTarget struct {

	// Metrics polling interval [30,3600]; defaults to 60s
	Interval int32 `json:"interval,omitempty"`

	// Metrics output plugin name [datadog|signalfx]
	// Required: true
	Plugin *string `json:"plugin"`

	// Plugin realm
	Realm string `json:"realm,omitempty"`

	// Plugin bearer token reference id to secret stored in v1/secrets
	// Required: true
	TokenID *string `json:"token_id"`

	// Plugin URL
	URL string `json:"url,omitempty"`
}

// Validate validates this v1 metrics exporter target
func (m *V1MetricsExporterTarget) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePlugin(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTokenID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1MetricsExporterTarget) validatePlugin(formats strfmt.Registry) error {

	if err := validate.Required("plugin", "body", m.Plugin); err != nil {
		return err
	}

	return nil
}

func (m *V1MetricsExporterTarget) validateTokenID(formats strfmt.Registry) error {

	if err := validate.Required("token_id", "body", m.TokenID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this v1 metrics exporter target based on context it is used
func (m *V1MetricsExporterTarget) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *V1MetricsExporterTarget) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1MetricsExporterTarget) UnmarshalBinary(b []byte) error {
	var res V1MetricsExporterTarget
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// V1DatasourcesPutResponse v1 datasources put response
//
// swagger:model v1.DatasourcesPutResponse
type V1DatasourcesPutResponse struct {

	// request id
	RequestID string `json:"request_id,omitempty"`

	// result
	Result struct {
		V1DatasourcesPutRequest

		// executed
		// Format: date-time
		Executed strfmt.DateTime `json:"executed,omitempty"`

		// id
		ID string `json:"id,omitempty"`

		// metadata
		Metadata *V1DatasourcesPutResponseResultAO1Metadata `json:"metadata,omitempty"`

		// resources
		Resources []interface{} `json:"resources"`

		// status
		Status interface{} `json:"status,omitempty"`
	} `json:"result,omitempty"`
}

// Validate validates this v1 datasources put response
func (m *V1DatasourcesPutResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateResult(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1DatasourcesPutResponse) validateResult(formats strfmt.Registry) error {
	if swag.IsZero(m.Result) { // not required
		return nil
	}

	if err := validate.FormatOf("result"+"."+"executed", "body", "date-time", m.Result.Executed.String(), formats); err != nil {
		return err
	}

	if m.Result.Metadata != nil {
		if err := m.Result.Metadata.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("result" + "." + "metadata")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this v1 datasources put response based on the context it is used
func (m *V1DatasourcesPutResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateResult(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1DatasourcesPutResponse) contextValidateResult(ctx context.Context, formats strfmt.Registry) error {

	if m.Result.Metadata != nil {
		if err := m.Result.Metadata.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("result" + "." + "metadata")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1DatasourcesPutResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1DatasourcesPutResponse) UnmarshalBinary(b []byte) error {
	var res V1DatasourcesPutResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// V1DatasourcesPutResponseResultAO1Metadata v1 datasources put response result a o1 metadata
//
// swagger:model V1DatasourcesPutResponseResultAO1Metadata
type V1DatasourcesPutResponseResultAO1Metadata struct {

	// created at
	// Format: date-time
	CreatedAt strfmt.DateTime `json:"created_at,omitempty"`

	// created by
	CreatedBy string `json:"created_by,omitempty"`

	// created through
	CreatedThrough string `json:"created_through,omitempty"`

	// last modified at
	// Format: date-time
	LastModifiedAt strfmt.DateTime `json:"last_modified_at,omitempty"`

	// last modified by
	LastModifiedBy string `json:"last_modified_by,omitempty"`

	// last modified through
	LastModifiedThrough string `json:"last_modified_through,omitempty"`
}

// Validate validates this v1 datasources put response result a o1 metadata
func (m *V1DatasourcesPutResponseResultAO1Metadata) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastModifiedAt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1DatasourcesPutResponseResultAO1Metadata) validateCreatedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.CreatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("result"+"."+"metadata"+"."+"created_at", "body", "date-time", m.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *V1DatasourcesPutResponseResultAO1Metadata) validateLastModifiedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.LastModifiedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("result"+"."+"metadata"+"."+"last_modified_at", "body", "date-time", m.LastModifiedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this v1 datasources put response result a o1 metadata based on context it is used
func (m *V1DatasourcesPutResponseResultAO1Metadata) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *V1DatasourcesPutResponseResultAO1Metadata) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1DatasourcesPutResponseResultAO1Metadata) UnmarshalBinary(b []byte) error {
	var res V1DatasourcesPutResponseResultAO1Metadata
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

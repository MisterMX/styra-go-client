// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// V1WorkspaceConfig v1 workspace config
//
// swagger:model v1.WorkspaceConfig
type V1WorkspaceConfig struct {

	// github
	Github *V1GithubConfiguration `json:"github,omitempty"`

	// metadata
	Metadata *V1ObjectMeta `json:"metadata,omitempty"`

	// source control
	SourceControl *V1SourceControlConfig `json:"source_control,omitempty"`
}

// Validate validates this v1 workspace config
func (m *V1WorkspaceConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateGithub(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMetadata(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSourceControl(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1WorkspaceConfig) validateGithub(formats strfmt.Registry) error {
	if swag.IsZero(m.Github) { // not required
		return nil
	}

	if m.Github != nil {
		if err := m.Github.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("github")
			}
			return err
		}
	}

	return nil
}

func (m *V1WorkspaceConfig) validateMetadata(formats strfmt.Registry) error {
	if swag.IsZero(m.Metadata) { // not required
		return nil
	}

	if m.Metadata != nil {
		if err := m.Metadata.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("metadata")
			}
			return err
		}
	}

	return nil
}

func (m *V1WorkspaceConfig) validateSourceControl(formats strfmt.Registry) error {
	if swag.IsZero(m.SourceControl) { // not required
		return nil
	}

	if m.SourceControl != nil {
		if err := m.SourceControl.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("source_control")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this v1 workspace config based on the context it is used
func (m *V1WorkspaceConfig) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateGithub(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMetadata(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSourceControl(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1WorkspaceConfig) contextValidateGithub(ctx context.Context, formats strfmt.Registry) error {

	if m.Github != nil {
		if err := m.Github.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("github")
			}
			return err
		}
	}

	return nil
}

func (m *V1WorkspaceConfig) contextValidateMetadata(ctx context.Context, formats strfmt.Registry) error {

	if m.Metadata != nil {
		if err := m.Metadata.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("metadata")
			}
			return err
		}
	}

	return nil
}

func (m *V1WorkspaceConfig) contextValidateSourceControl(ctx context.Context, formats strfmt.Registry) error {

	if m.SourceControl != nil {
		if err := m.SourceControl.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("source_control")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1WorkspaceConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1WorkspaceConfig) UnmarshalBinary(b []byte) error {
	var res V1WorkspaceConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// V2Entitlement v2 entitlement
//
// swagger:model v2.Entitlement
type V2Entitlement struct {

	// dimension
	// Required: true
	Dimension *string `json:"dimension"`

	// expiration
	// Required: true
	// Format: date-time
	Expiration *strfmt.DateTime `json:"expiration"`

	// skuid
	// Required: true
	Skuid *string `json:"skuid"`

	// value
	// Required: true
	Value *string `json:"value"`
}

// Validate validates this v2 entitlement
func (m *V2Entitlement) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDimension(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExpiration(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSkuid(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateValue(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V2Entitlement) validateDimension(formats strfmt.Registry) error {

	if err := validate.Required("dimension", "body", m.Dimension); err != nil {
		return err
	}

	return nil
}

func (m *V2Entitlement) validateExpiration(formats strfmt.Registry) error {

	if err := validate.Required("expiration", "body", m.Expiration); err != nil {
		return err
	}

	if err := validate.FormatOf("expiration", "body", "date-time", m.Expiration.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *V2Entitlement) validateSkuid(formats strfmt.Registry) error {

	if err := validate.Required("skuid", "body", m.Skuid); err != nil {
		return err
	}

	return nil
}

func (m *V2Entitlement) validateValue(formats strfmt.Registry) error {

	if err := validate.Required("value", "body", m.Value); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this v2 entitlement based on context it is used
func (m *V2Entitlement) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *V2Entitlement) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V2Entitlement) UnmarshalBinary(b []byte) error {
	var res V2Entitlement
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

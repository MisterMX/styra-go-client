// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TimeseriesV1TimeSeriesPostRequest timeseries v1 time series post request
//
// swagger:model timeseries.v1.TimeSeriesPostRequest
type TimeseriesV1TimeSeriesPostRequest struct {

	// data kind
	// Required: true
	DataKind *string `json:"data_kind"`

	// end time
	// Required: true
	// Format: date-time
	EndTime *strfmt.DateTime `json:"end_time"`

	// policy
	// Required: true
	Policy *string `json:"policy"`

	// resolution
	// Required: true
	Resolution *int64 `json:"resolution"`

	// stack
	// Required: true
	Stack *string `json:"stack"`

	// start time
	// Required: true
	// Format: date-time
	StartTime *strfmt.DateTime `json:"start_time"`

	// system
	// Required: true
	System *string `json:"system"`
}

// Validate validates this timeseries v1 time series post request
func (m *TimeseriesV1TimeSeriesPostRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDataKind(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEndTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePolicy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResolution(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStack(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSystem(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TimeseriesV1TimeSeriesPostRequest) validateDataKind(formats strfmt.Registry) error {

	if err := validate.Required("data_kind", "body", m.DataKind); err != nil {
		return err
	}

	return nil
}

func (m *TimeseriesV1TimeSeriesPostRequest) validateEndTime(formats strfmt.Registry) error {

	if err := validate.Required("end_time", "body", m.EndTime); err != nil {
		return err
	}

	if err := validate.FormatOf("end_time", "body", "date-time", m.EndTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *TimeseriesV1TimeSeriesPostRequest) validatePolicy(formats strfmt.Registry) error {

	if err := validate.Required("policy", "body", m.Policy); err != nil {
		return err
	}

	return nil
}

func (m *TimeseriesV1TimeSeriesPostRequest) validateResolution(formats strfmt.Registry) error {

	if err := validate.Required("resolution", "body", m.Resolution); err != nil {
		return err
	}

	return nil
}

func (m *TimeseriesV1TimeSeriesPostRequest) validateStack(formats strfmt.Registry) error {

	if err := validate.Required("stack", "body", m.Stack); err != nil {
		return err
	}

	return nil
}

func (m *TimeseriesV1TimeSeriesPostRequest) validateStartTime(formats strfmt.Registry) error {

	if err := validate.Required("start_time", "body", m.StartTime); err != nil {
		return err
	}

	if err := validate.FormatOf("start_time", "body", "date-time", m.StartTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *TimeseriesV1TimeSeriesPostRequest) validateSystem(formats strfmt.Registry) error {

	if err := validate.Required("system", "body", m.System); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this timeseries v1 time series post request based on context it is used
func (m *TimeseriesV1TimeSeriesPostRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *TimeseriesV1TimeSeriesPostRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TimeseriesV1TimeSeriesPostRequest) UnmarshalBinary(b []byte) error {
	var res TimeseriesV1TimeSeriesPostRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

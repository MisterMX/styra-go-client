// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DatasourcesV1HTTP http
// Example: {"ca_certificate":"-----BEGIN CERTIFICATE REQUEST----- MIIB9TCCAWACAQAwgbgxGTAXBgNVBAoMEFF1b1ZhZGlzIExpbWl0ZWQxHDAaBgNV BAsME0RvY3VtZW50IERlcGFydG1lbnQxOTA3BgNVBAMMMFdoeSBhcmUgeW91IGRl Y29kaW5nIG1lPyAgVGhpcyBpcyBvbmx5IGEgdGVzdCEhITERMA8GA1UEBwwISGFt aWx0b24xETAPBgNVBAgMCFBlbWJyb2tlMQswCQYDVQQGEwJCTTEPMA0GCSqGSIb3 DQEJARYAMIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCJ9WRanG/fUvcfKiGl EL4aRLjGt537mZ28UU9/3eiJeJznNSOuNLnF+hmabAu7H0LT4K7EdqfF+XUZW/2j RKRYcvOUDGF9A7OjW7UfKk1In3+6QDCi7X34RE161jqoaJjrm/T18TOKcgkkhRzE apQnIDm0Ea/HVzX/PiSOGuertwIDAQABMAsGCSqGSIb3DQEBBQOBgQBzMJdAV4QP Awel8LzGx5uMOshezF/KfP67wJ93UW+N7zXY6AwPgoLj4Kjw+WtU684JL8Dtr9FX ozakE+8p06BpxegR4BR3FMHf6p+0jQxUEAkAyb/mVgm66TyghDGC6/YkiKoZptXQ 98TwDIK/39WEB/V607As+KoYazQG8drorw== -----END CERTIFICATE REQUEST-----\n","category":"http","headers":[{"name":"TOKEN","secret_id":"http_token"}],"on_premises":false,"polling_interval":"60s","type":"pull"}
//
// swagger:model datasources.v1.HTTP
type DatasourcesV1HTTP struct {
	DatasourcesV1Common

	DatasourcesV1Poller

	DatasourcesV1RegoFiltering

	DatasourcesV1TLSSettings

	// headers
	Headers []*DatasourcesV1HTTPHeader `json:"headers"`

	// url
	// Required: true
	URL *string `json:"url"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *DatasourcesV1HTTP) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 DatasourcesV1Common
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.DatasourcesV1Common = aO0

	// AO1
	var aO1 DatasourcesV1Poller
	if err := swag.ReadJSON(raw, &aO1); err != nil {
		return err
	}
	m.DatasourcesV1Poller = aO1

	// AO2
	var aO2 DatasourcesV1RegoFiltering
	if err := swag.ReadJSON(raw, &aO2); err != nil {
		return err
	}
	m.DatasourcesV1RegoFiltering = aO2

	// AO3
	var aO3 DatasourcesV1TLSSettings
	if err := swag.ReadJSON(raw, &aO3); err != nil {
		return err
	}
	m.DatasourcesV1TLSSettings = aO3

	// AO4
	var dataAO4 struct {
		Headers []*DatasourcesV1HTTPHeader `json:"headers"`

		URL *string `json:"url"`
	}
	if err := swag.ReadJSON(raw, &dataAO4); err != nil {
		return err
	}

	m.Headers = dataAO4.Headers

	m.URL = dataAO4.URL

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m DatasourcesV1HTTP) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 5)

	aO0, err := swag.WriteJSON(m.DatasourcesV1Common)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	aO1, err := swag.WriteJSON(m.DatasourcesV1Poller)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO1)

	aO2, err := swag.WriteJSON(m.DatasourcesV1RegoFiltering)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO2)

	aO3, err := swag.WriteJSON(m.DatasourcesV1TLSSettings)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO3)
	var dataAO4 struct {
		Headers []*DatasourcesV1HTTPHeader `json:"headers"`

		URL *string `json:"url"`
	}

	dataAO4.Headers = m.Headers

	dataAO4.URL = m.URL

	jsonDataAO4, errAO4 := swag.WriteJSON(dataAO4)
	if errAO4 != nil {
		return nil, errAO4
	}
	_parts = append(_parts, jsonDataAO4)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this datasources v1 HTTP
func (m *DatasourcesV1HTTP) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with DatasourcesV1Common
	if err := m.DatasourcesV1Common.Validate(formats); err != nil {
		res = append(res, err)
	}
	// validation for a type composition with DatasourcesV1Poller
	if err := m.DatasourcesV1Poller.Validate(formats); err != nil {
		res = append(res, err)
	}
	// validation for a type composition with DatasourcesV1RegoFiltering
	if err := m.DatasourcesV1RegoFiltering.Validate(formats); err != nil {
		res = append(res, err)
	}
	// validation for a type composition with DatasourcesV1TLSSettings
	if err := m.DatasourcesV1TLSSettings.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHeaders(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateURL(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DatasourcesV1HTTP) validateHeaders(formats strfmt.Registry) error {

	if swag.IsZero(m.Headers) { // not required
		return nil
	}

	for i := 0; i < len(m.Headers); i++ {
		if swag.IsZero(m.Headers[i]) { // not required
			continue
		}

		if m.Headers[i] != nil {
			if err := m.Headers[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("headers" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("headers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DatasourcesV1HTTP) validateURL(formats strfmt.Registry) error {

	if err := validate.Required("url", "body", m.URL); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this datasources v1 HTTP based on the context it is used
func (m *DatasourcesV1HTTP) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with DatasourcesV1Common
	if err := m.DatasourcesV1Common.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}
	// validation for a type composition with DatasourcesV1Poller
	if err := m.DatasourcesV1Poller.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}
	// validation for a type composition with DatasourcesV1RegoFiltering
	if err := m.DatasourcesV1RegoFiltering.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}
	// validation for a type composition with DatasourcesV1TLSSettings
	if err := m.DatasourcesV1TLSSettings.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateHeaders(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DatasourcesV1HTTP) contextValidateHeaders(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Headers); i++ {

		if m.Headers[i] != nil {
			if err := m.Headers[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("headers" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("headers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *DatasourcesV1HTTP) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DatasourcesV1HTTP) UnmarshalBinary(b []byte) error {
	var res DatasourcesV1HTTP
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

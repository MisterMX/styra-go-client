// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SystemsV1SystemParameters systems v1 system parameters
//
// swagger:model systems.v1.SystemParameters
type SystemsV1SystemParameters struct {

	// bundle registry configuration
	BundleRegistry *SystemsV1BundleRegistryConfig `json:"bundle_registry,omitempty"`

	// location of key attributes and additional columns in the decisions grouped by policy entry point path
	DecisionMappings map[string]SystemsV1RuleDecisionMappings `json:"decision_mappings,omitempty"`

	// configuration settings to be used by the system agents
	DeploymentParameters *SystemsV1SystemDeploymentParameters `json:"deployment_parameters,omitempty"`

	// description for the system
	Description string `json:"description,omitempty"`

	// error/warning configuration: one of "all", "errors", "none"
	ErrorSetting string `json:"error_setting,omitempty"`

	// external system ID
	ExternalID string `json:"external_id,omitempty"`

	// system name
	// Required: true
	Name *string `json:"name"`

	// prevents users from modifying policies using Styra UIs
	ReadOnly *bool `json:"read_only,omitempty"`

	// source control system configuration
	SourceControl *GitV1SourceControlConfig `json:"source_control,omitempty"`

	// system type e.g. kubernetes
	// Required: true
	Type *string `json:"type"`

	// system type parameter values (for template.* types)
	TypeParameters interface{} `json:"type_parameters,omitempty"`
}

// Validate validates this systems v1 system parameters
func (m *SystemsV1SystemParameters) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBundleRegistry(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDecisionMappings(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDeploymentParameters(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSourceControl(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SystemsV1SystemParameters) validateBundleRegistry(formats strfmt.Registry) error {
	if swag.IsZero(m.BundleRegistry) { // not required
		return nil
	}

	if m.BundleRegistry != nil {
		if err := m.BundleRegistry.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("bundle_registry")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("bundle_registry")
			}
			return err
		}
	}

	return nil
}

func (m *SystemsV1SystemParameters) validateDecisionMappings(formats strfmt.Registry) error {
	if swag.IsZero(m.DecisionMappings) { // not required
		return nil
	}

	for k := range m.DecisionMappings {

		if err := validate.Required("decision_mappings"+"."+k, "body", m.DecisionMappings[k]); err != nil {
			return err
		}
		if val, ok := m.DecisionMappings[k]; ok {
			if err := val.Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *SystemsV1SystemParameters) validateDeploymentParameters(formats strfmt.Registry) error {
	if swag.IsZero(m.DeploymentParameters) { // not required
		return nil
	}

	if m.DeploymentParameters != nil {
		if err := m.DeploymentParameters.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("deployment_parameters")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("deployment_parameters")
			}
			return err
		}
	}

	return nil
}

func (m *SystemsV1SystemParameters) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *SystemsV1SystemParameters) validateSourceControl(formats strfmt.Registry) error {
	if swag.IsZero(m.SourceControl) { // not required
		return nil
	}

	if m.SourceControl != nil {
		if err := m.SourceControl.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("source_control")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("source_control")
			}
			return err
		}
	}

	return nil
}

func (m *SystemsV1SystemParameters) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this systems v1 system parameters based on the context it is used
func (m *SystemsV1SystemParameters) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateBundleRegistry(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDecisionMappings(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDeploymentParameters(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSourceControl(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SystemsV1SystemParameters) contextValidateBundleRegistry(ctx context.Context, formats strfmt.Registry) error {

	if m.BundleRegistry != nil {
		if err := m.BundleRegistry.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("bundle_registry")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("bundle_registry")
			}
			return err
		}
	}

	return nil
}

func (m *SystemsV1SystemParameters) contextValidateDecisionMappings(ctx context.Context, formats strfmt.Registry) error {

	for k := range m.DecisionMappings {

		if val, ok := m.DecisionMappings[k]; ok {
			if err := val.ContextValidate(ctx, formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *SystemsV1SystemParameters) contextValidateDeploymentParameters(ctx context.Context, formats strfmt.Registry) error {

	if m.DeploymentParameters != nil {
		if err := m.DeploymentParameters.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("deployment_parameters")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("deployment_parameters")
			}
			return err
		}
	}

	return nil
}

func (m *SystemsV1SystemParameters) contextValidateSourceControl(ctx context.Context, formats strfmt.Registry) error {

	if m.SourceControl != nil {
		if err := m.SourceControl.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("source_control")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("source_control")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SystemsV1SystemParameters) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SystemsV1SystemParameters) UnmarshalBinary(b []byte) error {
	var res SystemsV1SystemParameters
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

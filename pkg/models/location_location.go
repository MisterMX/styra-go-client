// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// LocationLocation location location
//
// swagger:model location.Location
type LocationLocation struct {

	// col
	// Required: true
	Col *int32 `json:"col"`

	// file
	// Required: true
	File *string `json:"file"`

	// row
	// Required: true
	Row *int32 `json:"row"`
}

// Validate validates this location location
func (m *LocationLocation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCol(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFile(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRow(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LocationLocation) validateCol(formats strfmt.Registry) error {

	if err := validate.Required("col", "body", m.Col); err != nil {
		return err
	}

	return nil
}

func (m *LocationLocation) validateFile(formats strfmt.Registry) error {

	if err := validate.Required("file", "body", m.File); err != nil {
		return err
	}

	return nil
}

func (m *LocationLocation) validateRow(formats strfmt.Registry) error {

	if err := validate.Required("row", "body", m.Row); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this location location based on context it is used
func (m *LocationLocation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *LocationLocation) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *LocationLocation) UnmarshalBinary(b []byte) error {
	var res LocationLocation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

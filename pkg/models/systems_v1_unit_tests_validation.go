// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// SystemsV1UnitTestsValidation systems v1 unit tests validation
//
// swagger:model systems.v1.UnitTestsValidation
type SystemsV1UnitTestsValidation struct {

	// all
	All []*SystemsV1TesterResult `json:"all"`

	// all count
	AllCount int32 `json:"all_count,omitempty"`

	// all errors count
	AllErrorsCount int32 `json:"all_errors_count,omitempty"`

	// all failed count
	AllFailedCount int32 `json:"all_failed_count,omitempty"`

	// new
	New []*SystemsV1TesterResult `json:"new"`

	// new count
	NewCount int32 `json:"new_count,omitempty"`

	// new errors count
	NewErrorsCount int32 `json:"new_errors_count,omitempty"`

	// new failed count
	NewFailedCount int32 `json:"new_failed_count,omitempty"`

	// resolved
	Resolved []*SystemsV1TesterResult `json:"resolved"`

	// resolved count
	ResolvedCount int32 `json:"resolved_count,omitempty"`

	// resolved errors count
	ResolvedErrorsCount int32 `json:"resolved_errors_count,omitempty"`

	// resolved failed count
	ResolvedFailedCount int32 `json:"resolved_failed_count,omitempty"`

	// unchanged
	Unchanged []*SystemsV1TesterResult `json:"unchanged"`

	// unchanged count
	UnchangedCount int32 `json:"unchanged_count,omitempty"`

	// unchanged errors count
	UnchangedErrorsCount int32 `json:"unchanged_errors_count,omitempty"`

	// unchanged failed count
	UnchangedFailedCount int32 `json:"unchanged_failed_count,omitempty"`
}

// Validate validates this systems v1 unit tests validation
func (m *SystemsV1UnitTestsValidation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAll(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNew(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResolved(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUnchanged(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SystemsV1UnitTestsValidation) validateAll(formats strfmt.Registry) error {
	if swag.IsZero(m.All) { // not required
		return nil
	}

	for i := 0; i < len(m.All); i++ {
		if swag.IsZero(m.All[i]) { // not required
			continue
		}

		if m.All[i] != nil {
			if err := m.All[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("all" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("all" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SystemsV1UnitTestsValidation) validateNew(formats strfmt.Registry) error {
	if swag.IsZero(m.New) { // not required
		return nil
	}

	for i := 0; i < len(m.New); i++ {
		if swag.IsZero(m.New[i]) { // not required
			continue
		}

		if m.New[i] != nil {
			if err := m.New[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("new" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("new" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SystemsV1UnitTestsValidation) validateResolved(formats strfmt.Registry) error {
	if swag.IsZero(m.Resolved) { // not required
		return nil
	}

	for i := 0; i < len(m.Resolved); i++ {
		if swag.IsZero(m.Resolved[i]) { // not required
			continue
		}

		if m.Resolved[i] != nil {
			if err := m.Resolved[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("resolved" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("resolved" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SystemsV1UnitTestsValidation) validateUnchanged(formats strfmt.Registry) error {
	if swag.IsZero(m.Unchanged) { // not required
		return nil
	}

	for i := 0; i < len(m.Unchanged); i++ {
		if swag.IsZero(m.Unchanged[i]) { // not required
			continue
		}

		if m.Unchanged[i] != nil {
			if err := m.Unchanged[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("unchanged" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("unchanged" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this systems v1 unit tests validation based on the context it is used
func (m *SystemsV1UnitTestsValidation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAll(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNew(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateResolved(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUnchanged(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SystemsV1UnitTestsValidation) contextValidateAll(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.All); i++ {

		if m.All[i] != nil {
			if err := m.All[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("all" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("all" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SystemsV1UnitTestsValidation) contextValidateNew(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.New); i++ {

		if m.New[i] != nil {
			if err := m.New[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("new" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("new" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SystemsV1UnitTestsValidation) contextValidateResolved(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Resolved); i++ {

		if m.Resolved[i] != nil {
			if err := m.Resolved[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("resolved" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("resolved" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SystemsV1UnitTestsValidation) contextValidateUnchanged(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Unchanged); i++ {

		if m.Unchanged[i] != nil {
			if err := m.Unchanged[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("unchanged" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("unchanged" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *SystemsV1UnitTestsValidation) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SystemsV1UnitTestsValidation) UnmarshalBinary(b []byte) error {
	var res SystemsV1UnitTestsValidation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

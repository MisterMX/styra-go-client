// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SystemsV1Module systems v1 module
//
// swagger:model systems.v1.Module
type SystemsV1Module struct {

	// module name
	// Required: true
	Name *string `json:"name"`

	// module is a placeholder
	// Read Only: true
	Placeholder *bool `json:"placeholder,omitempty"`

	// true if module is read-only
	// Required: true
	ReadOnly *bool `json:"read_only"`

	// module rule count
	// Read Only: true
	Rules *PoliciesV1RuleCounts `json:"rules,omitempty"`
}

// Validate validates this systems v1 module
func (m *SystemsV1Module) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReadOnly(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRules(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SystemsV1Module) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *SystemsV1Module) validateReadOnly(formats strfmt.Registry) error {

	if err := validate.Required("read_only", "body", m.ReadOnly); err != nil {
		return err
	}

	return nil
}

func (m *SystemsV1Module) validateRules(formats strfmt.Registry) error {
	if swag.IsZero(m.Rules) { // not required
		return nil
	}

	if m.Rules != nil {
		if err := m.Rules.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("rules")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("rules")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this systems v1 module based on the context it is used
func (m *SystemsV1Module) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidatePlaceholder(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRules(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SystemsV1Module) contextValidatePlaceholder(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "placeholder", "body", m.Placeholder); err != nil {
		return err
	}

	return nil
}

func (m *SystemsV1Module) contextValidateRules(ctx context.Context, formats strfmt.Registry) error {

	if m.Rules != nil {
		if err := m.Rules.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("rules")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("rules")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SystemsV1Module) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SystemsV1Module) UnmarshalBinary(b []byte) error {
	var res SystemsV1Module
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// V1TenantsPutRequest v1 tenants put request
//
// swagger:model v1.TenantsPutRequest
type V1TenantsPutRequest struct {

	// removed tenants
	// Required: true
	RemovedTenants []string `json:"removed_tenants"`

	// tenants
	// Required: true
	Tenants map[string]V2TenantDetails `json:"tenants"`
}

// Validate validates this v1 tenants put request
func (m *V1TenantsPutRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateRemovedTenants(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTenants(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1TenantsPutRequest) validateRemovedTenants(formats strfmt.Registry) error {

	if err := validate.Required("removed_tenants", "body", m.RemovedTenants); err != nil {
		return err
	}

	return nil
}

func (m *V1TenantsPutRequest) validateTenants(formats strfmt.Registry) error {

	if err := validate.Required("tenants", "body", m.Tenants); err != nil {
		return err
	}

	for k := range m.Tenants {

		if err := validate.Required("tenants"+"."+k, "body", m.Tenants[k]); err != nil {
			return err
		}
		if val, ok := m.Tenants[k]; ok {
			if err := val.Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this v1 tenants put request based on the context it is used
func (m *V1TenantsPutRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateTenants(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1TenantsPutRequest) contextValidateTenants(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.Required("tenants", "body", m.Tenants); err != nil {
		return err
	}

	for k := range m.Tenants {

		if val, ok := m.Tenants[k]; ok {
			if err := val.ContextValidate(ctx, formats); err != nil {
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1TenantsPutRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1TenantsPutRequest) UnmarshalBinary(b []byte) error {
	var res V1TenantsPutRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

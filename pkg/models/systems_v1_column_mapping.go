// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SystemsV1ColumnMapping systems v1 column mapping
//
// swagger:model systems.v1.ColumnMapping
type SystemsV1ColumnMapping struct {

	// column key (also the search key)
	// Required: true
	Key *string `json:"key"`

	// dot-separated decision property path
	// Required: true
	Path *string `json:"path"`

	// column type: one of "string", "boolean", "date", "integer", "float"
	Type *string `json:"type,omitempty"`
}

// Validate validates this systems v1 column mapping
func (m *SystemsV1ColumnMapping) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateKey(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePath(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SystemsV1ColumnMapping) validateKey(formats strfmt.Registry) error {

	if err := validate.Required("key", "body", m.Key); err != nil {
		return err
	}

	return nil
}

func (m *SystemsV1ColumnMapping) validatePath(formats strfmt.Registry) error {

	if err := validate.Required("path", "body", m.Path); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this systems v1 column mapping based on context it is used
func (m *SystemsV1ColumnMapping) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *SystemsV1ColumnMapping) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SystemsV1ColumnMapping) UnmarshalBinary(b []byte) error {
	var res SystemsV1ColumnMapping
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

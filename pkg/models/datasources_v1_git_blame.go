// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// DatasourcesV1GitBlame git/blame
// Example: {"category":"git/blame","on_premises":false,"path_regexp\"":"^foo.+bar$","reference\"":"refs/heads/main","ssh_credentials":{"private_key":"git_ssh_key"},"type":"pull","url":"https://git.example.com"}
//
// swagger:model datasources.v1.Git.Blame
type DatasourcesV1GitBlame struct {
	DatasourcesV1GitCommon

	// path regexp
	PathRegexp *string `json:"path_regexp,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *DatasourcesV1GitBlame) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 DatasourcesV1GitCommon
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.DatasourcesV1GitCommon = aO0

	// AO1
	var dataAO1 struct {
		PathRegexp *string `json:"path_regexp,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.PathRegexp = dataAO1.PathRegexp

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m DatasourcesV1GitBlame) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.DatasourcesV1GitCommon)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		PathRegexp *string `json:"path_regexp,omitempty"`
	}

	dataAO1.PathRegexp = m.PathRegexp

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this datasources v1 git blame
func (m *DatasourcesV1GitBlame) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with DatasourcesV1GitCommon
	if err := m.DatasourcesV1GitCommon.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validate this datasources v1 git blame based on the context it is used
func (m *DatasourcesV1GitBlame) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with DatasourcesV1GitCommon
	if err := m.DatasourcesV1GitCommon.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (m *DatasourcesV1GitBlame) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DatasourcesV1GitBlame) UnmarshalBinary(b []byte) error {
	var res DatasourcesV1GitBlame
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

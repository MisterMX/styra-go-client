// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// WorkspaceV1S3VerifyResponse workspace v1 s3 verify response
//
// swagger:model workspace.v1.S3VerifyResponse
type WorkspaceV1S3VerifyResponse struct {

	// request id
	RequestID string `json:"request_id,omitempty"`

	// s3 code
	// Required: true
	S3Code *string `json:"s3_code"`

	// s3 message
	// Required: true
	S3Message *string `json:"s3_message"`
}

// Validate validates this workspace v1 s3 verify response
func (m *WorkspaceV1S3VerifyResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateS3Code(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateS3Message(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *WorkspaceV1S3VerifyResponse) validateS3Code(formats strfmt.Registry) error {

	if err := validate.Required("s3_code", "body", m.S3Code); err != nil {
		return err
	}

	return nil
}

func (m *WorkspaceV1S3VerifyResponse) validateS3Message(formats strfmt.Registry) error {

	if err := validate.Required("s3_message", "body", m.S3Message); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this workspace v1 s3 verify response based on context it is used
func (m *WorkspaceV1S3VerifyResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *WorkspaceV1S3VerifyResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *WorkspaceV1S3VerifyResponse) UnmarshalBinary(b []byte) error {
	var res WorkspaceV1S3VerifyResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

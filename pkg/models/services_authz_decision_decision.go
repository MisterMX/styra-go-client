// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ServicesAuthzDecisionDecision services authz decision decision
//
// swagger:model services.authz.decision.Decision
type ServicesAuthzDecisionDecision struct {

	// input
	// Required: true
	Input *ServicesAuthzDecisionInput `json:"input"`

	// output
	// Required: true
	Output *ServicesAuthzDecisionOutput `json:"output"`
}

// Validate validates this services authz decision decision
func (m *ServicesAuthzDecisionDecision) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateInput(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOutput(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ServicesAuthzDecisionDecision) validateInput(formats strfmt.Registry) error {

	if err := validate.Required("input", "body", m.Input); err != nil {
		return err
	}

	if m.Input != nil {
		if err := m.Input.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("input")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("input")
			}
			return err
		}
	}

	return nil
}

func (m *ServicesAuthzDecisionDecision) validateOutput(formats strfmt.Registry) error {

	if err := validate.Required("output", "body", m.Output); err != nil {
		return err
	}

	if m.Output != nil {
		if err := m.Output.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("output")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("output")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this services authz decision decision based on the context it is used
func (m *ServicesAuthzDecisionDecision) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateInput(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOutput(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ServicesAuthzDecisionDecision) contextValidateInput(ctx context.Context, formats strfmt.Registry) error {

	if m.Input != nil {
		if err := m.Input.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("input")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("input")
			}
			return err
		}
	}

	return nil
}

func (m *ServicesAuthzDecisionDecision) contextValidateOutput(ctx context.Context, formats strfmt.Registry) error {

	if m.Output != nil {
		if err := m.Output.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("output")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("output")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ServicesAuthzDecisionDecision) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ServicesAuthzDecisionDecision) UnmarshalBinary(b []byte) error {
	var res ServicesAuthzDecisionDecision
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

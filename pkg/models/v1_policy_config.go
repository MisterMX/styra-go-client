// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// V1PolicyConfig v1 policy config
//
// swagger:model v1.PolicyConfig
type V1PolicyConfig struct {

	// policy on when to (re)generate the policy
	Created string `json:"created,omitempty"`

	// enforcement status of the policy
	// Required: true
	Enforcement *V1EnforcementConfig `json:"enforcement"`

	// policy ID (path)
	// Required: true
	ID *string `json:"id"`

	// rego modules policy consists of
	Modules []*V1Module `json:"modules"`

	// rule count
	Rules *V1RuleCounts `json:"rules,omitempty"`

	// policy type e.g. validating/rules
	// Required: true
	Type *string `json:"type"`
}

// Validate validates this v1 policy config
func (m *V1PolicyConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEnforcement(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateModules(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRules(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1PolicyConfig) validateEnforcement(formats strfmt.Registry) error {

	if err := validate.Required("enforcement", "body", m.Enforcement); err != nil {
		return err
	}

	if m.Enforcement != nil {
		if err := m.Enforcement.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("enforcement")
			}
			return err
		}
	}

	return nil
}

func (m *V1PolicyConfig) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *V1PolicyConfig) validateModules(formats strfmt.Registry) error {
	if swag.IsZero(m.Modules) { // not required
		return nil
	}

	for i := 0; i < len(m.Modules); i++ {
		if swag.IsZero(m.Modules[i]) { // not required
			continue
		}

		if m.Modules[i] != nil {
			if err := m.Modules[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("modules" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V1PolicyConfig) validateRules(formats strfmt.Registry) error {
	if swag.IsZero(m.Rules) { // not required
		return nil
	}

	if m.Rules != nil {
		if err := m.Rules.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("rules")
			}
			return err
		}
	}

	return nil
}

func (m *V1PolicyConfig) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this v1 policy config based on the context it is used
func (m *V1PolicyConfig) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateEnforcement(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateModules(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRules(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1PolicyConfig) contextValidateEnforcement(ctx context.Context, formats strfmt.Registry) error {

	if m.Enforcement != nil {
		if err := m.Enforcement.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("enforcement")
			}
			return err
		}
	}

	return nil
}

func (m *V1PolicyConfig) contextValidateModules(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Modules); i++ {

		if m.Modules[i] != nil {
			if err := m.Modules[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("modules" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V1PolicyConfig) contextValidateRules(ctx context.Context, formats strfmt.Registry) error {

	if m.Rules != nil {
		if err := m.Rules.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("rules")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1PolicyConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1PolicyConfig) UnmarshalBinary(b []byte) error {
	var res V1PolicyConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

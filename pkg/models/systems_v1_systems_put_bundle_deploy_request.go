// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SystemsV1SystemsPutBundleDeployRequest systems v1 systems put bundle deploy request
//
// swagger:model systems.v1.SystemsPutBundleDeployRequest
type SystemsV1SystemsPutBundleDeployRequest struct {

	// activate even if bundle is not compatible with running agents
	// Required: true
	Force *bool `json:"force"`

	// primary bundle to activate
	// Required: true
	Primary *SystemsV1BundleActivation `json:"primary"`
}

// Validate validates this systems v1 systems put bundle deploy request
func (m *SystemsV1SystemsPutBundleDeployRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateForce(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePrimary(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SystemsV1SystemsPutBundleDeployRequest) validateForce(formats strfmt.Registry) error {

	if err := validate.Required("force", "body", m.Force); err != nil {
		return err
	}

	return nil
}

func (m *SystemsV1SystemsPutBundleDeployRequest) validatePrimary(formats strfmt.Registry) error {

	if err := validate.Required("primary", "body", m.Primary); err != nil {
		return err
	}

	if m.Primary != nil {
		if err := m.Primary.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("primary")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("primary")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this systems v1 systems put bundle deploy request based on the context it is used
func (m *SystemsV1SystemsPutBundleDeployRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidatePrimary(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SystemsV1SystemsPutBundleDeployRequest) contextValidatePrimary(ctx context.Context, formats strfmt.Registry) error {

	if m.Primary != nil {
		if err := m.Primary.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("primary")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("primary")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SystemsV1SystemsPutBundleDeployRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SystemsV1SystemsPutBundleDeployRequest) UnmarshalBinary(b []byte) error {
	var res SystemsV1SystemsPutBundleDeployRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

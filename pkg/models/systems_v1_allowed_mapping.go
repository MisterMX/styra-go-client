// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SystemsV1AllowedMapping systems v1 allowed mapping
//
// swagger:model systems.v1.AllowedMapping
type SystemsV1AllowedMapping struct {

	// expected value of the decision property
	Expected SystemsV1AllowedMappingExpected `json:"expected,omitempty"`

	// when set to true, decision is Allowed when the mapped property IS NOT equal to the expected value
	Negated *bool `json:"negated,omitempty"`

	// dot-separated decision property path
	// Required: true
	Path *string `json:"path"`
}

// Validate validates this systems v1 allowed mapping
func (m *SystemsV1AllowedMapping) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePath(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SystemsV1AllowedMapping) validatePath(formats strfmt.Registry) error {

	if err := validate.Required("path", "body", m.Path); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this systems v1 allowed mapping based on context it is used
func (m *SystemsV1AllowedMapping) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *SystemsV1AllowedMapping) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SystemsV1AllowedMapping) UnmarshalBinary(b []byte) error {
	var res SystemsV1AllowedMapping
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
